// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package providers

import (
	"github.com/ZupIT/horusec-platform/api/config/cors"
	analysis2 "github.com/ZupIT/horusec-platform/api/internal/controllers/analysis"
	analysis3 "github.com/ZupIT/horusec-platform/api/internal/handlers/analysis"
	"github.com/ZupIT/horusec-platform/api/internal/handlers/health"
	token2 "github.com/ZupIT/horusec-platform/api/internal/middelwares/token"
	"github.com/ZupIT/horusec-platform/api/internal/repositories/analysis"
	"github.com/ZupIT/horusec-platform/api/internal/repositories/repository"
	"github.com/ZupIT/horusec-platform/api/internal/repositories/token"
	"github.com/ZupIT/horusec-platform/api/internal/router"
	"github.com/google/wire"

	"github.com/ZupIT/horusec-devkit/pkg/services/app"
	"github.com/ZupIT/horusec-devkit/pkg/services/broker"
	config2 "github.com/ZupIT/horusec-devkit/pkg/services/broker/config"
	"github.com/ZupIT/horusec-devkit/pkg/services/database"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/config"
	"github.com/ZupIT/horusec-devkit/pkg/services/grpc/auth"
	"github.com/ZupIT/horusec-devkit/pkg/services/grpc/auth/proto"
	"github.com/ZupIT/horusec-devkit/pkg/services/http"
)

// Injectors from wire.go:

func Initialize(defaultPort string) (router.IRouter, error) {
	options := cors.NewCorsConfig()
	iRouter := http.NewHTTPRouter(options, defaultPort)
	iConfig := config.NewDatabaseConfig()
	connection, err := database.NewDatabaseReadAndWrite(iConfig)
	if err != nil {
		return nil, err
	}
	iToken := token.NewRepositoriesToken(connection)
	iTokenAuthz := token2.NewTokenAuthz(iToken)
	configIConfig := config2.NewBrokerConfig()
	clientConnInterface := auth.NewAuthGRPCConnection()
	authServiceClient := proto.NewAuthServiceClient(clientConnInterface)
	appIConfig := app.NewAppConfig(authServiceClient)
	iBroker, err := broker.NewBroker(configIConfig, appIConfig)
	if err != nil {
		return nil, err
	}
	iRepository := repository.NewRepositoriesRepository(connection)
	iAnalysis := analysis.NewRepositoriesAnalysis(connection)
	iController := analysis2.NewAnalysisController(iBroker, appIConfig, iRepository, iAnalysis)
	handler := analysis3.NewAnalysisHandler(iController)
	healthHandler := health.NewHealthHandler(iBroker, configIConfig, connection, clientConnInterface, appIConfig)
	routerIRouter := router.NewHTTPRouter(iRouter, iTokenAuthz, handler, healthHandler)
	return routerIRouter, nil
}

// wire.go:

var providers = wire.NewSet(config2.NewBrokerConfig, broker.NewBroker, config.NewDatabaseConfig, database.NewDatabaseReadAndWrite, auth.NewAuthGRPCConnection, proto.NewAuthServiceClient, token2.NewTokenAuthz, analysis.NewRepositoriesAnalysis, repository.NewRepositoriesRepository, token.NewRepositoriesToken, cors.NewCorsConfig, http.NewHTTPRouter, app.NewAppConfig, analysis2.NewAnalysisController, analysis3.NewAnalysisHandler, health.NewHealthHandler, router.NewHTTPRouter)
