components:
  analytic:
    container:
      image:
        # -- describes a policy for if/when to pull Horusec Analytic container image
        pullPolicy: IfNotPresent
        # -- an optional list of references to secrets in the same namespace to use for pulling any of the images used by Horusec Analytic pod
        pullSecrets: [ ]
        # -- the registry where the repository used to store Horusec Analytic container image is
        registry: docker.io/horuszup
        # -- the repository used to store Horusec Analytic container image
        repository: horusec-analytic
        # -- the reference to the Horusec Analytic container image version
        tag: v2.14.0
      livenessProbe: null
      readinessProbe: null
      resources: null
      securityContext:
        enabled: false
        runAsNonRoot: true
        runAsUser: 1000
    database:
      host: "postgresql"
      logMode: false
      migration:
        image:
          pullPolicy: IfNotPresent
          pullSecrets: [ ]
          registry: docker.io/horuszup
          repository: horusec-migrations
          tag: v2.14.0
      name: analytic_db
      password:
        secretKeyRef:
          key: password
          name: horusec-database
      port: 5432
      sslMode: false
      user:
        secretKeyRef:
          key: username
          name: horusec-database
    extraEnv: [ ]
    ingress:
      enabled: true
      host: analytic.local
      path: /analytic
      tls: null
      #   secretName: analytic-tls
    name: analytic
    pod:
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPU: 50
        targetMemory: 50
      securityContext:
        enabled: false
        fsGroup: 2000
    port:
      http: 8005
    replicaCount: 1
  api:
    container:
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io/horuszup
        repository: horusec-api
        tag: v2.14.0
      livenessProbe: null
      readinessProbe: null
      resources: null
      securityContext:
        enabled: false
        runAsNonRoot: true
        runAsUser: 1000
    extraEnv: [ ]
    ingress:
      enabled: true
      host: api.local
      path: /api
      tls: null
      #   secretName: api-tls
    name: api
    pod:
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPU: 50
        targetMemory: 50
      securityContext:
        enabled: false
        fsGroup: 2000
    port:
      http: 8000
    replicaCount: 1
  auth:
    container:
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io/horuszup
        repository: horusec-auth
        tag: v2.14.0
      livenessProbe: null
      readinessProbe: null
      resources: null
      securityContext:
        enabled: false
        runAsNonRoot: true
        runAsUser: 1000
    extraEnv: [ ]
    ingress:
      enabled: true
      host: auth.local
      path: /auth
      tls: null
      #   secretName: auth-tls
    name: auth
    pod:
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPU: 50
        targetMemory: 50
      securityContext:
        enabled: false
        fsGroup: 2000
    port:
      grpc: 8007
      http: 8006
    replicaCount: 1
    type: horusec
  core:
    container:
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io/horuszup
        repository: horusec-core
        tag: v2.14.0
      livenessProbe: null
      readinessProbe: null
      resources: null
      securityContext:
        enabled: false
        runAsNonRoot: true
        runAsUser: 1000
    extraEnv: [ ]
    ingress:
      enabled: true
      host: core.local
      path: /core
      tls: null
      #   secretName: core-tls
    name: core
    pod:
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPU: 50
        targetMemory: 50
      securityContext:
        enabled: false
        fsGroup: 2000
    port:
      http: 8003
    replicaCount: 1
  manager:
    container:
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io/horuszup
        repository: horusec-manager
        tag: v2.14.0
      livenessProbe: null
      readinessProbe: null
      resources: null
      securityContext:
        enabled: false
        runAsNonRoot: true
        runAsUser: 1000
    extraEnv: [ ]
    ingress:
      enabled: true
      host: manager.local
      path: /manager
      tls: null
      #   secretName: manager-tls
    name: manager
    pod:
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPU: 50
        targetMemory: 50
      securityContext:
        enabled: false
        fsGroup: 2000
    port:
      http: 8080
    replicaCount: 1
  messages:
    container:
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io/horuszup
        repository: horusec-messages
        tag: v2.14.0
      livenessProbe: null
      readinessProbe: null
      resources: null
      securityContext:
        enabled: false
        runAsNonRoot: true
        runAsUser: 1000
    enabled: false
    extraEnv: [ ]
    ingress:
      enabled: true
      host: messages.local
      path: /messages
      tls: null
      #   secretName: messages-tls
    mailServer:
      host: smtp.mailtrap.io
      from: horusec@zup.com.br
      password:
        secretKeyRef:
          key: password
          name: horusec-smtp
      port: 25
      user:
        secretKeyRef:
          key: username
          name: horusec-smtp
    name: messages
    pod:
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPU: 50
        targetMemory: 50
      securityContext:
        enabled: false
        fsGroup: 2000
    port:
      http: 8004
    replicaCount: 1
  vulnerability:
    container:
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io/horuszup
        repository: horusec-vulnerability
        tag: v2.14.0
      livenessProbe: null
      readinessProbe: null
      resources: null
      securityContext:
        enabled: false
        runAsNonRoot: true
        runAsUser: 1000
    extraEnv: [ ]
    ingress:
      enabled: true
      host: vulnerability.local
      path: /vulnerability
      tls: null
      #   secretName: vulnerability-tls
    name: vulnerability
    pod:
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPU: 50
        targetMemory: 50
      securityContext:
        enabled: false
        fsGroup: 2000
    port:
      http: 8003
    replicaCount: 1
  webhook:
    container:
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io/horuszup
        repository: horusec-webhook
        tag: v2.14.0
      livenessProbe: null
      readinessProbe: null
      resources: null
      securityContext:
        enabled: false
        runAsNonRoot: true
        runAsUser: 1000
    extraEnv: [ ]
    ingress:
      enabled: true
      host: webhook.local
      path: /webhook
      tls: null
      #   secretName: webhook-tls
    name: webhook
    pod:
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPU: 50
        targetMemory: 50
      securityContext:
        enabled: false
        fsGroup: 2000
    port:
      http: 8005
    replicaCount: 1
global:
  administrator:
    email: ""
    enabled: false
    password:
      secretKeyRef:
        key: password
        name: horusec-administrator
    user:
      secretKeyRef:
        key: username
        name: horusec-administrator
  broker:
    host: "rabbitmq"
    password:
      secretKeyRef:
        key: password
        name: horusec-broker
    port: 5672
    user:
      secretKeyRef:
        key: username
        name: horusec-broker
  database:
    host: "postgresql"
    logMode: false
    migration:
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io/horuszup
        repository: horusec-migrations
        tag: v2.14.0
    name: horusec_db
    password:
      secretKeyRef:
        key: password
        name: horusec-database
    port: 5432
    sslMode: false
    user:
      secretKeyRef:
        key: username
        name: horusec-database
  jwt:
    secretKeyRef:
      key: jwt-token
      name: horusec-jwt
  keycloak:
    clients:
      confidential:
        id: auth
        secretKeyRef:
          key: client-secret
          name: horusec-client-secret
      public:
        id: manager
    internalURL: ""
    otp: false
    publicURL: ""
    realm: horusec
  ingress:
    certManager: true
    annotations: {}
      # kubernetes.io/ingress.class: "nginx"