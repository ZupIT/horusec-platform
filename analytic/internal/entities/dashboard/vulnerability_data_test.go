// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dashboard

import (
	"testing"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	"github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	"github.com/stretchr/testify/assert"
)

func TestToResponseSeverity(t *testing.T) {
	t.Run("should success parse to response", func(t *testing.T) {
		vuln := &Vulnerability{
			CriticalVulnerability: 2,
			CriticalRiskAccepted:  1,
			CriticalFalsePositive: 1,
			CriticalCorrected:     2,
			HighVulnerability:     2,
			HighFalsePositive:     1,
			HighRiskAccepted:      1,
			HighCorrected:         1,
			MediumVulnerability:   2,
			MediumFalsePositive:   1,
			MediumRiskAccepted:    1,
			MediumCorrected:       0,
			LowVulnerability:      2,
			LowFalsePositive:      1,
			LowRiskAccepted:       0,
			LowCorrected:          0,
			InfoVulnerability:     1,
			InfoFalsePositive:     0,
			InfoRiskAccepted:      1,
			InfoCorrected:         0,
			UnknownVulnerability:  0,
			UnknownFalsePositive:  1,
			UnknownRiskAccepted:   0,
			UnknownCorrected:      0,
		}

		response := vuln.ToResponseBySeverities()
		assert.Equal(t, 6, response.Critical.Count)
		assert.Equal(t, 5, response.High.Count)
		assert.Equal(t, 4, response.Medium.Count)
		assert.Equal(t, 3, response.Low.Count)
		assert.Equal(t, 2, response.Info.Count)
		assert.Equal(t, 1, response.Unknown.Count)
	})
}

func TestAddCountVulnerabilityBySeverity(t *testing.T) {
	t.Run("should success add count for severity", func(t *testing.T) {
		vuln := &Vulnerability{}

		vuln.AddCountVulnerabilityBySeverity(severities.Critical, vulnerability.Vulnerability)
		vuln.AddCountVulnerabilityBySeverity(severities.Critical, vulnerability.FalsePositive)
		vuln.AddCountVulnerabilityBySeverity(severities.Critical, vulnerability.RiskAccepted)
		vuln.AddCountVulnerabilityBySeverity(severities.Critical, vulnerability.Corrected)
		vuln.AddCountVulnerabilityBySeverity(severities.High, vulnerability.Vulnerability)
		vuln.AddCountVulnerabilityBySeverity(severities.High, vulnerability.FalsePositive)
		vuln.AddCountVulnerabilityBySeverity(severities.High, vulnerability.RiskAccepted)
		vuln.AddCountVulnerabilityBySeverity(severities.High, vulnerability.Corrected)
		vuln.AddCountVulnerabilityBySeverity(severities.Medium, vulnerability.Vulnerability)
		vuln.AddCountVulnerabilityBySeverity(severities.Medium, vulnerability.FalsePositive)
		vuln.AddCountVulnerabilityBySeverity(severities.Medium, vulnerability.RiskAccepted)
		vuln.AddCountVulnerabilityBySeverity(severities.Medium, vulnerability.Corrected)
		vuln.AddCountVulnerabilityBySeverity(severities.Low, vulnerability.Vulnerability)
		vuln.AddCountVulnerabilityBySeverity(severities.Low, vulnerability.FalsePositive)
		vuln.AddCountVulnerabilityBySeverity(severities.Low, vulnerability.RiskAccepted)
		vuln.AddCountVulnerabilityBySeverity(severities.Low, vulnerability.Corrected)
		vuln.AddCountVulnerabilityBySeverity(severities.Info, vulnerability.Vulnerability)
		vuln.AddCountVulnerabilityBySeverity(severities.Info, vulnerability.FalsePositive)
		vuln.AddCountVulnerabilityBySeverity(severities.Info, vulnerability.RiskAccepted)
		vuln.AddCountVulnerabilityBySeverity(severities.Info, vulnerability.Corrected)
		vuln.AddCountVulnerabilityBySeverity(severities.Unknown, vulnerability.Vulnerability)
		vuln.AddCountVulnerabilityBySeverity(severities.Unknown, vulnerability.FalsePositive)
		vuln.AddCountVulnerabilityBySeverity(severities.Unknown, vulnerability.RiskAccepted)
		vuln.AddCountVulnerabilityBySeverity(severities.Unknown, vulnerability.Corrected)

		response := vuln.ToResponseBySeverities()
		assert.Equal(t, 4, response.Critical.Count)
		assert.Equal(t, 4, response.High.Count)
		assert.Equal(t, 4, response.Medium.Count)
		assert.Equal(t, 4, response.Low.Count)
		assert.Equal(t, 4, response.Info.Count)
		assert.Equal(t, 4, response.Unknown.Count)
	})
}
