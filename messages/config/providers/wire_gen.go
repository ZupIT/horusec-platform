// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package providers

import (
	"github.com/ZupIT/horusec-devkit/pkg/services/broker"
	"github.com/ZupIT/horusec-devkit/pkg/services/broker/config"
	router2 "github.com/ZupIT/horusec-devkit/pkg/services/http/router"
	"github.com/google/wire"

	"github.com/ZupIT/horusec-platform/messages/config/cors"
	"github.com/ZupIT/horusec-platform/messages/internal/controllers/email"
	email2 "github.com/ZupIT/horusec-platform/messages/internal/events/email"
	"github.com/ZupIT/horusec-platform/messages/internal/handlers/health"
	"github.com/ZupIT/horusec-platform/messages/internal/router"
	"github.com/ZupIT/horusec-platform/messages/internal/services/mailer"
)

// Injectors from wire.go:

func Initialize(string2 string) (router.IRouter, error) {
	options := cors.NewCorsConfig()
	iRouter := router2.NewHTTPRouter(options, string2)
	iConfig := config.NewBrokerConfig()
	iBroker, err := broker.NewBroker(iConfig)
	if err != nil {
		return nil, err
	}
	iService := mailer.NewMailerService()
	handler := health.NewHealthHandler(iBroker, iService)
	iController := email.NewEmailController(iService)
	eventHandler := email2.NewEmailEventHandler(iController, iBroker)
	routerIRouter := router.NewHTTPRouter(iRouter, handler, eventHandler)
	return routerIRouter, nil
}

// wire.go:

var devKitProviders = wire.NewSet(config.NewBrokerConfig, broker.NewBroker, router2.NewHTTPRouter)

var configProviders = wire.NewSet(cors.NewCorsConfig, router.NewHTTPRouter)

var controllerProviders = wire.NewSet(email.NewEmailController)

var handleProviders = wire.NewSet(health.NewHealthHandler)

var eventProviders = wire.NewSet(email2.NewEmailEventHandler)

var serviceProviders = wire.NewSet(mailer.NewMailerService)
