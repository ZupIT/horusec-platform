package management

import (
	"errors"
	"testing"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"

	vulnerabilityEntities "github.com/ZupIT/horusec-devkit/pkg/entities/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/services/database"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/response"

	managementEntities "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management"
	managementUseCases "github.com/ZupIT/horusec-platform/vulnerability/internal/usecase/management"
)

func TestGetAllVulnerabilities(t *testing.T) {
	t.Run("should success get vulnerability data", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Return(&response.Response{})

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.GetAllVulnerabilities(&managementEntities.Filter{})
		assert.NoError(t, err)
		assert.NotNil(t, result)
	})

	t.Run("should return error when getting vulns paginated", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Once().Return(&response.Response{})
		databaseMock.On("Raw").Return(
			response.NewResponse(0, errors.New("test"), nil))

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.GetAllVulnerabilities(&managementEntities.Filter{})
		assert.Error(t, err)
		assert.Nil(t, result)
	})

	t.Run("should return error when getting total items", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Once().Return(
			response.NewResponse(0, errors.New("test"), nil))

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.GetAllVulnerabilities(&managementEntities.Filter{})
		assert.Error(t, err)
		assert.Nil(t, result)
	})
}

func TestGetVulnerability(t *testing.T) {
	t.Run("should success get vulnerability", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Find").Return(&response.Response{})

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		_, err := repository.GetVulnerability(uuid.New())
		assert.NoError(t, err)
	})
}

func TestUpdateVulnerability(t *testing.T) {
	t.Run("should success update vulnerability", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Update").Return(&response.Response{})

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		assert.NoError(t, repository.UpdateVulnerability(&vulnerabilityEntities.Vulnerability{}))
	})
}

func TestGetAnalysis(t *testing.T) {
	t.Run("should success get analysis", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("FindPreload").Return(&response.Response{})

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		_, err := repository.GetAnalysis(uuid.New())
		assert.NoError(t, err)
	})
}
