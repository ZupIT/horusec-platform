// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package management

import (
	"errors"
	"testing"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"

	"github.com/ZupIT/horusec-devkit/pkg/services/database"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/response"

	managementEntities "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management"
	managementUseCases "github.com/ZupIT/horusec-platform/vulnerability/internal/usecase/management"
)

func TestGetAllVulnerabilitiesOfTheFile(t *testing.T) {
	t.Run("should success get all vulnerabilities of the file data", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Return(&response.Response{})

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.ListVulnerabilitiesByFile(&managementEntities.Filter{})
		assert.NoError(t, err)
		assert.NotNil(t, result)
	})

	t.Run("should return error when getting vulns paginated", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Once().Return(&response.Response{})
		databaseMock.On("Raw").Return(
			response.NewResponse(0, errors.New("test"), nil))

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.ListVulnerabilitiesByFile(&managementEntities.Filter{})
		assert.Error(t, err)
		assert.Nil(t, result)
	})

	t.Run("should return error when getting total items", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Once().Return(
			response.NewResponse(0, errors.New("test"), nil))

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.ListVulnerabilitiesByFile(&managementEntities.Filter{})
		assert.Error(t, err)
		assert.Nil(t, result)
	})
}

func TestGetAllFilesVulnerable(t *testing.T) {
	t.Run("should success get all files vulnerable data", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Return(&response.Response{})

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.ListVulnerableFiles(&managementEntities.Filter{})
		assert.NoError(t, err)
		assert.NotNil(t, result)
	})

	t.Run("should return error when getting vulns paginated", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Once().Return(&response.Response{})
		databaseMock.On("Raw").Return(
			response.NewResponse(0, errors.New("test"), nil))

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.ListVulnerableFiles(&managementEntities.Filter{})
		assert.Error(t, err)
		assert.Nil(t, result)
	})

	t.Run("should return error when getting total items", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Raw").Once().Return(
			response.NewResponse(0, errors.New("test"), nil))

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := repository.ListVulnerableFiles(&managementEntities.Filter{})
		assert.Error(t, err)
		assert.Nil(t, result)
	})
}

func TestGetVulnerability(t *testing.T) {
	t.Run("should success get vulnerability", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("Find").Return(&response.Response{})

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		_, err := repository.GetVulnerability(uuid.New())
		assert.NoError(t, err)
	})
}

func TestGetAnalysis(t *testing.T) {
	t.Run("should success get analysis", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("FindPreload").Return(&response.Response{})

		databaseConnection := &database.Connection{
			Read:  databaseMock,
			Write: databaseMock,
		}

		repository := NewManagementRepository(databaseConnection, managementUseCases.NewManagementUseCases())

		_, err := repository.GetAnalysis(uuid.New())
		assert.NoError(t, err)
	})
}
