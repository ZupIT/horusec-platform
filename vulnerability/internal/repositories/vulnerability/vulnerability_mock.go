package vulnerability

import (
	"github.com/ZupIT/horusec-devkit/pkg/entities/vulnerability"
	utilsMock "github.com/ZupIT/horusec-devkit/pkg/utils/mock"
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"

	entity "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/vulnerability"
)

type Mock struct {
	mock.Mock
}

func (m *Mock) GetVulnerabilityBYID(_ uuid.UUID) (*vulnerability.Vulnerability, error) {
	args := m.MethodCalled("GetVulnerabilityBYID")
	vuln := args.Get(0)
	if vuln == nil {
		return nil, utilsMock.ReturnNilOrError(args, 1)
	}
	return vuln.(*vulnerability.Vulnerability), utilsMock.ReturnNilOrError(args, 1)
}
func (m *Mock) FindAllVulnerabilitiesByFilter(
	_ *entity.FilterToFindAllVulnerabilities) (*entity.FindVulnerabilities, error) {
	args := m.MethodCalled("FindAllVulnerabilitiesByFilter")
	return args.Get(0).(*entity.FindVulnerabilities), utilsMock.ReturnNilOrError(args, 1)
}
func (m *Mock) UpdateVulnerability(updateVulnerability *entity.UpdateVulnerability) error {
	args := m.MethodCalled("UpdateVulnerability")
	return utilsMock.ReturnNilOrError(args, 0)
}
