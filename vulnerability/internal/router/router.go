// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package router

import (
	"github.com/go-chi/chi"

	httpRouter "github.com/ZupIT/horusec-devkit/pkg/services/http/router"
	"github.com/ZupIT/horusec-devkit/pkg/services/middlewares"
	"github.com/ZupIT/horusec-devkit/pkg/services/swagger"

	"github.com/ZupIT/horusec-platform/vulnerability/docs"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/enums/routes"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/handlers/health"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/handlers/management"
)

type IRouter interface {
	httpRouter.IRouter
}

type Router struct {
	httpRouter.IRouter
	swagger.ISwagger
	middlewares.IAuthzMiddleware
	healthHandler     *health.Handler
	managementHandler *management.Handler
}

func NewHTTPRouter(routerHTTP httpRouter.IRouter, authzMiddleware middlewares.IAuthzMiddleware,
	healthHandler *health.Handler, managementHandler *management.Handler) IRouter {
	router := &Router{
		IRouter:           routerHTTP,
		IAuthzMiddleware:  authzMiddleware,
		ISwagger:          swagger.NewSwagger(routerHTTP.GetMux(), "8001"),
		healthHandler:     healthHandler,
		managementHandler: managementHandler,
	}

	return router.setRoutes()
}

func (r *Router) setRoutes() IRouter {
	r.routerHealth()
	r.routerSwagger()
	r.routerVulnerabilities()

	return r
}

func (r *Router) routerHealth() {
	r.Route(routes.HealthRouter, func(router chi.Router) {
		router.Options("/", r.healthHandler.Options)
		router.Get("/", r.healthHandler.Get)
	})
}

func (r *Router) routerVulnerabilities() {
	r.Route(routes.ManagementVulnerabilitiesRouter, func(router chi.Router) {
		router.Options("/", r.managementHandler.Options)
		router.With(r.IsRepositoryMember).Get("/workspace/{workspaceID}/repository/{repositoryID}/files",
			r.managementHandler.ListVulnerableFilesByRepository)
		router.With(r.IsRepositoryMember).Get("/workspace/{workspaceID}/files",
			r.managementHandler.ListVulnerableFilesByWorkspace)
		router.With(r.IsRepositoryMember).Get("/workspace/{workspaceID}/repository/{repositoryID}/files/vulnerabilities",
			r.managementHandler.ListVulnerabilitiesByFileByRepository)
		router.With(r.IsWorkspaceAdmin).Patch("/workspace/{workspaceID}/vulnerabilities",
			r.managementHandler.UpdateVulnerabilitiesByWorkspace)
		router.With(r.IsRepositorySupervisor).Patch("/workspace/{workspaceID}/repository/{repositoryID}/"+
			"vulnerabilities", r.managementHandler.UpdateVulnerabilitiesByRepository)
	})
}

func (r *Router) routerSwagger() {
	r.SetupSwagger()

	docs.SwaggerInfo.Host = r.GetSwaggerHost()
}
