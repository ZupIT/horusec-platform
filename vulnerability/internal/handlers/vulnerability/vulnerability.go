package vulnerability

import (
	netHTTP "net/http"

	entityVulnerability "github.com/ZupIT/horusec-devkit/pkg/entities/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/enums"
	httpUtil "github.com/ZupIT/horusec-devkit/pkg/utils/http"
	_ "github.com/ZupIT/horusec-devkit/pkg/utils/http/entities" // [swagger-import]

	controllerVulnerability "github.com/ZupIT/horusec-platform/vulnerability/internal/controllers/vulnerability"
	internalEntityVuln "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/vulnerability"
	useCaseVulnerabilityFilter "github.com/ZupIT/horusec-platform/vulnerability/internal/usecase/vulnerability_filter"
)

type Handler struct {
	controller                 controllerVulnerability.IController
	useCaseVulnerabilityFilter useCaseVulnerabilityFilter.IUseCaseVulnerabilityFilter
}

func NewVulnerabilitiesHandler(controller controllerVulnerability.IController) *Handler {
	return &Handler{
		controller:                 controller,
		useCaseVulnerabilityFilter: useCaseVulnerabilityFilter.NewUseCaseVulnerabilityFilter(),
	}
}

func (h *Handler) Options(w netHTTP.ResponseWriter, _ *netHTTP.Request) {
	httpUtil.StatusNoContent(w)
}

// Get @Tags Vulnerabilities
// @Security ApiKeyAuth
// @Description Get all vulnerabilities data by repository
// @ID get-all-vulnerabilities
// @Accept  json
// @Produce  json
// @Param repositoryID path string true "repositoryID of the repository"
// @Param page query string false "page query string"
// @Param size query string false "size query string"
// @Param vulnHash query string false "vulnerability hash query string"
// @Param vulnType query string false "vulnerability type query string" Enums(CRITICAL, HIGH, MEDIUM, LOW, INFO)
// @Param vulnSeverity query string false "vulnerability severity query string" Enums(Vulnerability, Risk Accepted, False Positive, Corrected)
// @Success 200 {object} entities.Response{content=internalEntityVuln.FindVulnerabilities} "OK"
// @Failure 400 {object} entities.Response{content=string} "BAD REQUEST"
// @Failure 500 {object} entities.Response{content=string} "INTERNAL SERVER ERROR"
// @Router /vulnerability/management/{repositoryID} [get]
func (h *Handler) Get(w netHTTP.ResponseWriter, r *netHTTP.Request) {
	filter, err := h.useCaseVulnerabilityFilter.ParseQueryInFilterToFindAllVulnerabilities(r)
	if err != nil {
		httpUtil.StatusBadRequest(w, err)
		return
	}
	result, err := h.controller.FindAllVulnerabilityByFilter(filter)
	if err != nil {
		if err == enums.ErrorNotFoundRecords {
			httpUtil.StatusOK(w, internalEntityVuln.FindVulnerabilities{
				TotalItems: 0, Data: []entityVulnerability.Vulnerability{}})
			return
		}
		httpUtil.StatusInternalServerError(w, err)
		return
	}
	httpUtil.StatusOK(w, result)
}
