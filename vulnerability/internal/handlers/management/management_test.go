// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package management

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/go-chi/chi"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	vulnerabilityEnums "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	databaseEnums "github.com/ZupIT/horusec-devkit/pkg/services/database/enums"
	"github.com/ZupIT/horusec-devkit/pkg/utils/parser"

	managementController "github.com/ZupIT/horusec-platform/vulnerability/internal/controllers/management"
	managementEntities "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management"
	managementUseCases "github.com/ZupIT/horusec-platform/vulnerability/internal/usecase/management"
)

func TestOptions(t *testing.T) {
	t.Run("should return no content when options", func(t *testing.T) {
		handler := NewManagementHandler(nil, nil)

		r, _ := http.NewRequest(http.MethodOptions, "/test", nil)

		w := httptest.NewRecorder()

		handler.Options(w, r)

		assert.Equal(t, http.StatusNoContent, w.Code)
	})
}

func TestGetAllVulnerabilitiesOfTheFileByRepository(t *testing.T) {
	t.Run("should return 200 when success get vulnerabilities", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerabilitiesByFile").Return(&managementEntities.ResponseVulnerabilitiesByFile{}, nil)

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		URL := fmt.Sprintf("/test?page=1&size=15&vulnSeverity=%s&vulnType=%s&vulnHash=%s&vulnFile=%s",
			severities.Critical.ToString(), vulnerabilityEnums.Vulnerability.ToString(), "123456", "go.mod")

		r, _ := http.NewRequest(http.MethodGet, URL, nil)

		w := httptest.NewRecorder()

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("repositoryID", uuid.NewString())
		ctx.URLParams.Add("workspaceID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.ListVulnerabilitiesByFileByRepository(w, r)

		assert.Equal(t, http.StatusOK, w.Code)
	})

	t.Run("should return 500 when something went wrong", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerabilitiesByFile").Return(
			&managementEntities.ResponseVulnerabilitiesByFile{}, errors.New("test"))

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		URL := fmt.Sprintf("/test?page=1&size=15&vulnSeverity=%s&vulnType=%s&vulnHash=%s&vulnFile=%s",
			severities.Critical.ToString(), vulnerabilityEnums.Vulnerability.ToString(), "123456", "go.mod")

		r, _ := http.NewRequest(http.MethodGet, URL, nil)

		w := httptest.NewRecorder()

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("repositoryID", uuid.NewString())
		ctx.URLParams.Add("workspaceID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.ListVulnerabilitiesByFileByRepository(w, r)

		assert.Equal(t, http.StatusInternalServerError, w.Code)
	})

	t.Run("should return 400 when invalid filter", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerabilitiesByFile").Return(
			&managementEntities.ResponseVulnerabilitiesByFile{}, errors.New("test"))

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		r, _ := http.NewRequest(http.MethodGet, "/test", nil)
		w := httptest.NewRecorder()

		handler.ListVulnerabilitiesByFileByRepository(w, r)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})
}

func TestUpdateVulnerabilitiesWorkspace(t *testing.T) {
	t.Run("should return 204 when vulnerabilities were successfully updated", func(t *testing.T) {
		controllerMock := &managementController.Mock{}
		controllerMock.On("UpdateVulnerabilities").Return(nil)

		data := &managementEntities.UpdateData{
			Vulnerabilities: []*managementEntities.VulnerabilityData{
				{
					Severity:        severities.Critical,
					Type:            vulnerabilityEnums.Vulnerability,
					VulnerabilityID: uuid.New(),
				},
			},
		}
		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		body, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		w := httptest.NewRecorder()

		r, _ := http.NewRequest(http.MethodPatch, "/test", body)

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.UpdateVulnerabilitiesByWorkspace(w, r)

		assert.Equal(t, http.StatusNoContent, w.Code)
	})

	t.Run("should return 500 when something went wrong", func(t *testing.T) {
		controllerMock := &managementController.Mock{}
		controllerMock.On("UpdateVulnerabilities").Return(errors.New("test"))

		data := &managementEntities.UpdateData{
			Vulnerabilities: []*managementEntities.VulnerabilityData{
				{
					Severity:        severities.Critical,
					Type:            vulnerabilityEnums.Vulnerability,
					VulnerabilityID: uuid.New(),
				},
			},
		}
		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		body, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		w := httptest.NewRecorder()

		r, _ := http.NewRequest(http.MethodPatch, "/test", body)

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.UpdateVulnerabilitiesByWorkspace(w, r)

		assert.Equal(t, http.StatusInternalServerError, w.Code)
	})

	t.Run("should return 404 when not found vulnerabilities", func(t *testing.T) {
		controllerMock := &managementController.Mock{}
		controllerMock.On("UpdateVulnerabilities").Return(databaseEnums.ErrorNotFoundRecords)

		data := &managementEntities.UpdateData{
			Vulnerabilities: []*managementEntities.VulnerabilityData{
				{
					Severity:        severities.Critical,
					Type:            vulnerabilityEnums.Vulnerability,
					VulnerabilityID: uuid.New(),
				},
			},
		}

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		body, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		w := httptest.NewRecorder()

		r, _ := http.NewRequest(http.MethodPatch, "/test", body)

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.UpdateVulnerabilitiesByWorkspace(w, r)

		assert.Equal(t, http.StatusNotFound, w.Code)
	})

	t.Run("should return 400 when invalid request body", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		data := &managementEntities.UpdateData{
			Vulnerabilities: []*managementEntities.VulnerabilityData{
				{
					Severity: "test",
				},
			},
		}

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		body, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		w := httptest.NewRecorder()

		r, _ := http.NewRequest(http.MethodPatch, "/test", body)

		handler.UpdateVulnerabilitiesByWorkspace(w, r)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})
}

func TestUpdateVulnerabilitiesRepository(t *testing.T) {
	t.Run("should return 204 when vulnerabilities were successfully updated", func(t *testing.T) {
		controllerMock := &managementController.Mock{}
		controllerMock.On("UpdateVulnerabilities").Return(nil)

		data := &managementEntities.UpdateData{
			Vulnerabilities: []*managementEntities.VulnerabilityData{
				{
					Severity:        severities.Critical,
					Type:            vulnerabilityEnums.Vulnerability,
					VulnerabilityID: uuid.New(),
				},
			},
		}
		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		body, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		w := httptest.NewRecorder()

		r, _ := http.NewRequest(http.MethodPatch, "/test", body)

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.UpdateVulnerabilitiesByRepository(w, r)

		assert.Equal(t, http.StatusNoContent, w.Code)
	})

	t.Run("should return 500 when something went wrong", func(t *testing.T) {
		controllerMock := &managementController.Mock{}
		controllerMock.On("UpdateVulnerabilities").Return(errors.New("test"))

		data := &managementEntities.UpdateData{
			Vulnerabilities: []*managementEntities.VulnerabilityData{
				{
					Severity:        severities.Critical,
					Type:            vulnerabilityEnums.Vulnerability,
					VulnerabilityID: uuid.New(),
				},
			},
		}
		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		body, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		w := httptest.NewRecorder()

		r, _ := http.NewRequest(http.MethodPatch, "/test", body)

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.UpdateVulnerabilitiesByRepository(w, r)

		assert.Equal(t, http.StatusInternalServerError, w.Code)
	})

	t.Run("should return 404 when not found vulnerabilities", func(t *testing.T) {
		controllerMock := &managementController.Mock{}
		controllerMock.On("UpdateVulnerabilities").Return(databaseEnums.ErrorNotFoundRecords)

		data := &managementEntities.UpdateData{
			Vulnerabilities: []*managementEntities.VulnerabilityData{
				{
					Severity:        severities.Critical,
					Type:            vulnerabilityEnums.Vulnerability,
					VulnerabilityID: uuid.New(),
				},
			},
		}

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		body, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		w := httptest.NewRecorder()

		r, _ := http.NewRequest(http.MethodPatch, "/test", body)

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.UpdateVulnerabilitiesByRepository(w, r)

		assert.Equal(t, http.StatusNotFound, w.Code)
	})

	t.Run("should return 400 when invalid request body", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		data := &managementEntities.UpdateData{
			Vulnerabilities: []*managementEntities.VulnerabilityData{
				{
					Severity: "test",
				},
			},
		}

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		body, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		w := httptest.NewRecorder()

		r, _ := http.NewRequest(http.MethodPatch, "/test", body)

		handler.UpdateVulnerabilitiesByRepository(w, r)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})
}

func TestGetAllFilesVulnerableByWorkspace(t *testing.T) {
	t.Run("should return 200 when success get all files", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerableFiles").Return(&managementEntities.ResponseFilesVulnerable{}, nil)

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		URL := fmt.Sprintf("/test?page=1&size=15&vulnSeverity=%s&vulnType=%s&vulnHash=%s",
			severities.Critical.ToString(), vulnerabilityEnums.Vulnerability.ToString(), "123456")

		r, _ := http.NewRequest(http.MethodGet, URL, nil)

		w := httptest.NewRecorder()

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("repositoryID", uuid.NewString())
		ctx.URLParams.Add("workspaceID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.ListVulnerableFilesByWorkspace(w, r)

		assert.Equal(t, http.StatusOK, w.Code)
	})

	t.Run("should return 500 when something went wrong", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerableFiles").Return(
			&managementEntities.ResponseFilesVulnerable{}, errors.New("test"))

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		URL := fmt.Sprintf("/test?page=1&size=15&vulnSeverity=%s&vulnType=%s&vulnHash=%s",
			severities.Critical.ToString(), vulnerabilityEnums.Vulnerability.ToString(), "123456")

		r, _ := http.NewRequest(http.MethodGet, URL, nil)

		w := httptest.NewRecorder()

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("repositoryID", uuid.NewString())
		ctx.URLParams.Add("workspaceID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.ListVulnerableFilesByWorkspace(w, r)

		assert.Equal(t, http.StatusInternalServerError, w.Code)
	})

	t.Run("should return 400 when invalid filter", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerableFiles").Return(
			&managementEntities.ResponseFilesVulnerable{}, errors.New("test"))

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		r, _ := http.NewRequest(http.MethodGet, "/test", nil)
		w := httptest.NewRecorder()

		handler.ListVulnerableFilesByWorkspace(w, r)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})
}

func TestGetAllFilesVulnerableByRepository(t *testing.T) {
	t.Run("should return 200 when success get vulnerabilities", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerableFiles").Return(&managementEntities.ResponseFilesVulnerable{}, nil)

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		URL := fmt.Sprintf("/test?page=1&size=15&vulnSeverity=%s&vulnType=%s&vulnHash=%s",
			severities.Critical.ToString(), vulnerabilityEnums.Vulnerability.ToString(), "123456")

		r, _ := http.NewRequest(http.MethodGet, URL, nil)

		w := httptest.NewRecorder()

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("repositoryID", uuid.NewString())
		ctx.URLParams.Add("workspaceID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.ListVulnerableFilesByRepository(w, r)

		assert.Equal(t, http.StatusOK, w.Code)
	})

	t.Run("should return 500 when something went wrong", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerableFiles").Return(
			&managementEntities.ResponseFilesVulnerable{}, errors.New("test"))

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		URL := fmt.Sprintf("/test?page=1&size=15&vulnSeverity=%s&vulnType=%s&vulnHash=%s",
			severities.Critical.ToString(), vulnerabilityEnums.Vulnerability.ToString(), "123456")

		r, _ := http.NewRequest(http.MethodGet, URL, nil)

		w := httptest.NewRecorder()

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("repositoryID", uuid.NewString())
		ctx.URLParams.Add("workspaceID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		handler.ListVulnerableFilesByRepository(w, r)

		assert.Equal(t, http.StatusInternalServerError, w.Code)
	})

	t.Run("should return 400 when invalid filter", func(t *testing.T) {
		controllerMock := &managementController.Mock{}

		controllerMock.On("ListVulnerableFiles").Return(
			&managementEntities.ResponseFilesVulnerable{}, errors.New("test"))

		handler := NewManagementHandler(controllerMock, managementUseCases.NewManagementUseCases())

		r, _ := http.NewRequest(http.MethodGet, "/test", nil)
		w := httptest.NewRecorder()

		handler.ListVulnerableFilesByRepository(w, r)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})
}
