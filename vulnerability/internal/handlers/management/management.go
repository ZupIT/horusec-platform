// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package management

import (
	"net/http"

	databaseEnums "github.com/ZupIT/horusec-devkit/pkg/services/database/enums"
	httpUtil "github.com/ZupIT/horusec-devkit/pkg/utils/http"
	_ "github.com/ZupIT/horusec-devkit/pkg/utils/http/entities" // [swagger-import]

	managementController "github.com/ZupIT/horusec-platform/vulnerability/internal/controllers/management"
	_ "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management" // [swagger-import]
	managementUseCases "github.com/ZupIT/horusec-platform/vulnerability/internal/usecase/management"
)

type Handler struct {
	controller managementController.IController
	useCases   managementUseCases.IUseCases
}

func NewManagementHandler(controller managementController.IController,
	useCases managementUseCases.IUseCases) *Handler {
	return &Handler{
		controller: controller,
		useCases:   useCases,
	}
}

func (h *Handler) Options(w http.ResponseWriter, _ *http.Request) {
	httpUtil.StatusNoContent(w)
}

//nolint:lll //swagger notations
// GetByRepository
// @Tags Vulnerabilities
// @Security ApiKeyAuth
// @Description Get all Vulnerabilities data by repository
// @ID list-vulnerabilities-by-file-repository
// @Accept  json
// @Produce  json
// @Param workspaceID path string true "workspaceID of the workspace"
// @Param repositoryID path string true "repositoryID of the repository"
// @Param page query string false "page query string"
// @Param size query string false "size query string"
// @Param vulnHash query string false "vulnerability hash query string"
// @Param vulnType query string true "vulnerability type query string" Enums(Vulnerability, Risk Accepted, False Positive, Corrected)
// @Param vulnSeverity query string false "vulnerability severity query string" Enums(CRITICAL, HIGH, MEDIUM, LOW, INFO)
// @Param vulnFile query string true "vulnerability file query string"
// @Success 200 {object} entities.Response{content=management.ResponseVulnerabilitiesByFile} "OK"
// @Failure 400 {object} entities.Response{content=string} "BAD REQUEST"
// @Failure 500 {object} entities.Response{content=string} "INTERNAL SERVER ERROR"
// @Router /vulnerability/management/workspace/{workspaceID}/repository/{repositoryID}/files/vulnerabilities [get]
func (h *Handler) ListVulnerabilitiesByFileByRepository(w http.ResponseWriter, r *http.Request) {
	filter, err := h.useCases.ManagementFilterFromRequest(r, true)
	if err != nil {
		httpUtil.StatusBadRequest(w, err)
		return
	}

	result, err := h.controller.ListVulnerabilitiesByFile(filter)
	if err != nil {
		httpUtil.StatusInternalServerError(w, err)
		return
	}

	httpUtil.StatusOK(w, result)
}

//nolint:lll //swagger notations
// GetByWorkspace
// @Tags Vulnerabilities
// @Security ApiKeyAuth
// @Description Get all vulnerabilities data by repository
// @ID get-all-files-vulnerable-by-workspace
// @Accept  json
// @Produce  json
// @Param workspaceID path string true "workspaceID of the workspace"
// @Param page query string false "page query string"
// @Param size query string false "size query string"
// @Param vulnHash query string false "vulnerability hash query string"
// @Param vulnType query string true "vulnerability type query string" Enums(Vulnerability, Risk Accepted, False Positive, Corrected)
// @Param vulnSeverity query string false "vulnerability severity query string" Enums(CRITICAL, HIGH, MEDIUM, LOW, INFO)
// @Success 200 {object} entities.Response{content=management.ResponseFilesVulnerable} "OK"
// @Failure 400 {object} entities.Response{content=string} "BAD REQUEST"
// @Failure 500 {object} entities.Response{content=string} "INTERNAL SERVER ERROR"
// @Router /vulnerability/management/workspace/{workspaceID}/files [get]
func (h *Handler) ListVulnerableFilesByWorkspace(w http.ResponseWriter, r *http.Request) {
	h.listVulnerableFiles(w, r, false)
}

//nolint:lll //swagger notations
// GetByRepository
// @Tags Vulnerabilities
// @Security ApiKeyAuth
// @Description Get all vulnerabilities data by repository
// @ID get-all-files-vulnerable-by-repository
// @Accept  json
// @Produce  json
// @Param workspaceID path string true "workspaceID of the workspace"
// @Param repositoryID path string true "repositoryID of the repository"
// @Param page query string false "page query string"
// @Param size query string false "size query string"
// @Param vulnHash query string false "vulnerability hash query string"
// @Param vulnType query string true "vulnerability type query string" Enums(Vulnerability, Risk Accepted, False Positive, Corrected)
// @Param vulnSeverity query string false "vulnerability severity query string" Enums(CRITICAL, HIGH, MEDIUM, LOW, INFO)
// @Success 200 {object} entities.Response{content=management.ResponseFilesVulnerable} "OK"
// @Failure 400 {object} entities.Response{content=string} "BAD REQUEST"
// @Failure 500 {object} entities.Response{content=string} "INTERNAL SERVER ERROR"
// @Router /vulnerability/management/workspace/{workspaceID}/repository/{repositoryID}/files [get]
func (h *Handler) ListVulnerableFilesByRepository(w http.ResponseWriter, r *http.Request) {
	h.listVulnerableFiles(w, r, false)
}

func (h *Handler) listVulnerableFiles(w http.ResponseWriter, r *http.Request, validateVulnFile bool) {
	filter, err := h.useCases.ManagementFilterFromRequest(r, validateVulnFile)
	if err != nil {
		httpUtil.StatusBadRequest(w, err)
		return
	}

	result, err := h.controller.ListVulnerableFiles(filter)
	if err != nil {
		httpUtil.StatusInternalServerError(w, err)
		return
	}

	httpUtil.StatusOK(w, result)
}

// Patch
// @Tags Vulnerabilities
// @Security ApiKeyAuth
// @Description Update severity or type of many vulnerabilities
// @ID update-vulnerabilities-workspace
// @Accept  json
// @Produce  json
// @Param workspaceID path string true "workspaceID of the workspace"
// @Param repositoryID path string true "repositoryID of the repository"
// @Param VulnerabilityData body management.UpdateData true "update vulnerability content info"
// @Success 204 "OK"
// @Failure 400 {object} entities.Response{content=string} "BAD REQUEST"
// @Failure 404 {object} entities.Response{content=string} "NOT FOUND"
// @Failure 500 {object} entities.Response{content=string} "INTERNAL SERVER ERROR"
// @Router /vulnerability/management/workspace/{workspaceID}/repository/{repositoryID}/vulnerabilities [patch]
func (h *Handler) UpdateVulnerabilitiesByRepository(w http.ResponseWriter, r *http.Request) {
	h.updateVulnerabilities(w, r)
}

// Patch
// @Tags Vulnerabilities
// @Security ApiKeyAuth
// @Description Update severity or type of many vulnerabilities
// @ID update-vulnerabilities-repository
// @Accept  json
// @Produce  json
// @Param workspaceID path string true "workspaceID of the workspace"
// @Param VulnerabilityData body management.UpdateData true "update vulnerability content info"
// @Success 204 "OK"
// @Failure 400 {object} entities.Response{content=string} "BAD REQUEST"
// @Failure 404 {object} entities.Response{content=string} "NOT FOUND"
// @Failure 500 {object} entities.Response{content=string} "INTERNAL SERVER ERROR"
// @Router /vulnerability/management/workspace/{workspaceID}/vulnerabilities [patch]
func (h *Handler) UpdateVulnerabilitiesByWorkspace(w http.ResponseWriter, r *http.Request) {
	h.updateVulnerabilities(w, r)
}

func (h *Handler) updateVulnerabilities(w http.ResponseWriter, r *http.Request) {
	data, err := h.useCases.UpdateDataFromIOReadCloser(r.Body)
	if err != nil {
		httpUtil.StatusBadRequest(w, err)
		return
	}

	if err := h.controller.UpdateVulnerabilities(data); err != nil {
		h.checkPatchErrors(w, err)
		return
	}

	httpUtil.StatusNoContent(w)
}

func (h *Handler) checkPatchErrors(w http.ResponseWriter, err error) {
	if err == databaseEnums.ErrorNotFoundRecords {
		httpUtil.StatusNotFound(w, err)
		return
	}

	httpUtil.StatusInternalServerError(w, err)
}
