package vulnerabilities

import (
	netHTTP "net/http"
	"strconv"

	"github.com/ZupIT/horusec-platform/vulnerability/internal/controllers/vulnerabilities"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/entities/vulnerability"
	"github.com/go-chi/chi"
	"github.com/google/uuid"

	entityVulnerability "github.com/ZupIT/horusec-devkit/pkg/entities/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	enumsVulnerability "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/enums"
	httpUtil "github.com/ZupIT/horusec-devkit/pkg/utils/http"
	_ "github.com/ZupIT/horusec-devkit/pkg/utils/http/entities" // [swagger-import]
)

type Handler struct {
	vulnerabilityController vulnerabilities.IController
}

func NewVulnerabilitiesHandler(vulnerabilityController vulnerabilities.IController) *Handler {
	return &Handler{
		vulnerabilityController: vulnerabilityController,
	}
}

func (h *Handler) Options(w netHTTP.ResponseWriter, _ *netHTTP.Request) {
	httpUtil.StatusNoContent(w)
}

// @Tags Vulnerabilities
// @Security ApiKeyAuth
// @Description Get all vulnerabilities data by repository
// @ID get-all-vulnerabilities
// @Accept  json
// @Produce  json
// @Param repositoryID path string true "repositoryID of the repository"
// @Param page query string false "page query string"
// @Param size query string false "size query string"
// @Param vulnHash query string false "vulnerability hash query string"
// @Param vulnType query string false "vulnerability type query string"
// @Param vulnSeverity query string false "vulnerability severity query string"
// @Success 200 {object} entities.Response "OK"
// @Failure 400 {object} entities.Response{content=string} "BAD REQUEST"
// @Failure 500 {object} entities.Response{content=string} "INTERNAL SERVER ERROR"
// @Router /vulnerability/management [get]
func (h *Handler) Get(w netHTTP.ResponseWriter, r *netHTTP.Request) {
	repositoryID, err := uuid.Parse(chi.URLParam(r, "repositoryID"))
	if err != nil {
		httpUtil.StatusBadRequest(w, err)
		return
	}
	filter := h.getVulnerabilityFilter(r, repositoryID)
	result, err := h.vulnerabilityController.FindAllVulnerabilityByFilter(filter)
	h.handleResultGet(result, err, w)
}

func (h *Handler) getVulnerabilityFilter(
	r *netHTTP.Request, repositoryID uuid.UUID) *vulnerability.FilterToFindAllVulnerabilities {
	page, _ := strconv.Atoi(r.URL.Query().Get("page"))
	size, _ := strconv.Atoi(r.URL.Query().Get("size"))
	return &vulnerability.FilterToFindAllVulnerabilities{
		RepositoryID: repositoryID,
		Page:         page,
		Size:         size,
		VulnSeverity: severities.GetSeverityByString(r.URL.Query().Get("vulnSeverity")),
		VulnType:     enumsVulnerability.GetVulnTypeByString(r.URL.Query().Get("vulnType")),
		VulnHash:     r.URL.Query().Get("vulnHash"),
	}
}

func (h *Handler) handleResultGet(result *vulnerability.FindVulnerabilities, err error, w netHTTP.ResponseWriter) {
	if err != nil {
		if err == enums.ErrorNotFoundRecords {
			httpUtil.StatusOK(w, vulnerability.FindVulnerabilities{
				TotalItems: 0, Data: []entityVulnerability.Vulnerability{}})
			return
		}
		httpUtil.StatusInternalServerError(w, err)
		return
	}

	httpUtil.StatusOK(w, result)
}
