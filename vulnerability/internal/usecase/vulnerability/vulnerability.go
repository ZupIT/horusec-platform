package vulnerability

import (
	netHTTP "net/http"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	enumsVulnerability "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"

	"github.com/ZupIT/horusec-devkit/pkg/utils/parser"
	parserEnums "github.com/ZupIT/horusec-devkit/pkg/utils/parser/enums"
	"github.com/go-chi/chi"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	"github.com/google/uuid"

	"github.com/ZupIT/horusec-platform/vulnerability/internal/entities/vulnerability"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/enums"
)

type IUseCaseVulnerability interface {
	DecodeUpdateVulnerabilityFromIoRead(r *netHTTP.Request) (updateVuln *vulnerability.UpdateVulnerability, err error)
}

type UseCaseVulnerability struct{}

func NewUseCaseVulnerability() IUseCaseVulnerability {
	return &UseCaseVulnerability{}
}

func (u *UseCaseVulnerability) DecodeUpdateVulnerabilityFromIoRead(
	r *netHTTP.Request) (updateVuln *vulnerability.UpdateVulnerability, err error) {
	vulnerabilityID, err := u.extractVulnerabilityIDFromURL(r)
	if err != nil {
		return nil, err
	}
	if r.Body == nil {
		return nil, parserEnums.ErrorBodyEmpty
	}
	if err := parser.ParseBodyToEntity(r.Body, &updateVuln); err != nil {
		return nil, err
	}
	updateVuln.VulnerabilityID = vulnerabilityID
	return updateVuln, u.validateUpdateVulnerability(updateVuln)
}

func (u *UseCaseVulnerability) validateUpdateVulnerability(vuln *vulnerability.UpdateVulnerability) error {
	return validation.ValidateStruct(vuln,
		validation.Field(&vuln.VulnerabilityID, validation.Required, validation.NotIn(uuid.Nil)),
		validation.Field(&vuln.Severity, validation.In(severities.Unknown, severities.Critical,
			severities.High, severities.Medium, severities.Low, severities.Info)),
		validation.Field(&vuln.Type, validation.In(enumsVulnerability.Vulnerability,
			enumsVulnerability.RiskAccepted, enumsVulnerability.FalsePositive, enumsVulnerability.Corrected)))
}

func (u *UseCaseVulnerability) extractVulnerabilityIDFromURL(r *netHTTP.Request) (uuid.UUID, error) {
	vulnerabilityID, err := uuid.Parse(chi.URLParam(r, "vulnerabilityID"))
	if err != nil {
		return uuid.Nil, enums.ErrorWrongVulnerabilityID
	}
	return vulnerabilityID, nil
}
