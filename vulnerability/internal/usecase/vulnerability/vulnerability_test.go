package vulnerability

import (
	"context"
	"io/ioutil"
	"net/http"
	"strings"
	"testing"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	enumsVulnerability "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/utils/parser"
	parserEnums "github.com/ZupIT/horusec-devkit/pkg/utils/parser/enums"
	"github.com/go-chi/chi"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"

	"github.com/ZupIT/horusec-platform/vulnerability/internal/entities/vulnerability"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/enums"
)

func TestUseCaseVulnerability_DecodeUpdateVulnerabilityFromIoRead(t *testing.T) {
	t.Run("Should extract struct of update vulnerability with success", func(t *testing.T) {
		vulnerabilityID := uuid.New()
		body, err := parser.ParseEntityToIOReadCloser(&vulnerability.UpdateVulnerability{
			Severity: severities.Critical,
			Type:     enumsVulnerability.Vulnerability,
		})
		assert.NoError(t, err)
		r, _ := http.NewRequest(http.MethodPatch, "/test", body)
		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", vulnerabilityID.String())
		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		result, err := NewUseCaseVulnerability().DecodeUpdateVulnerabilityFromIoRead(r)
		assert.NoError(t, err)
		assert.NotEmpty(t, result)
	})
	t.Run("Should return error when body is empty", func(t *testing.T) {
		vulnerabilityID := uuid.New()
		r, _ := http.NewRequest(http.MethodPatch, "/test", nil)
		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", vulnerabilityID.String())
		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		result, err := NewUseCaseVulnerability().DecodeUpdateVulnerabilityFromIoRead(r)
		assert.Equal(t, parserEnums.ErrorBodyEmpty, err)
		assert.Empty(t, result)
	})
	t.Run("Should return error when body is an type invalid", func(t *testing.T) {
		vulnerabilityID := uuid.New()

		body := ioutil.NopCloser(strings.NewReader("some invalid body"))
		r, _ := http.NewRequest(http.MethodPatch, "/test", body)
		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", vulnerabilityID.String())
		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		result, err := NewUseCaseVulnerability().DecodeUpdateVulnerabilityFromIoRead(r)
		assert.Equal(t, parserEnums.ErrorBodyInvalid, err)
		assert.Empty(t, result)
	})
	t.Run("Should return error on get vulnerability ID from URL", func(t *testing.T) {
		body, err := parser.ParseEntityToIOReadCloser(&vulnerability.UpdateVulnerability{
			Severity: severities.Critical,
			Type:     enumsVulnerability.Vulnerability,
		})
		assert.NoError(t, err)
		r, _ := http.NewRequest(http.MethodPatch, "/test", body)
		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("vulnerabilityID", "test")
		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		result, err := NewUseCaseVulnerability().DecodeUpdateVulnerabilityFromIoRead(r)
		assert.Equal(t, enums.ErrorWrongVulnerabilityID, err)
		assert.Empty(t, result)
	})
}
