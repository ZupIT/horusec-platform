package vulnerabilityfilter

import (
	netHTTP "net/http"
	"strconv"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	enumsVulnerability "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	"github.com/go-chi/chi"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	"github.com/google/uuid"

	"github.com/ZupIT/horusec-platform/vulnerability/internal/entities/vulnerability"
	enumsFilterVulnerabilities "github.com/ZupIT/horusec-platform/vulnerability/internal/enums/usecase/filter_vulnerabilities"
)

type IUseCaseVulnerabilityFilter interface {
	ParseQueryInFilterToFindAllVulnerabilities(r *netHTTP.Request) (*vulnerability.FilterToFindAllVulnerabilities, error)
}

type UseCaseVulnerabilityFilter struct{}

func NewUseCaseVulnerabilityFilter() IUseCaseVulnerabilityFilter {
	return &UseCaseVulnerabilityFilter{}
}

func (u *UseCaseVulnerabilityFilter) ParseQueryInFilterToFindAllVulnerabilities(
	r *netHTTP.Request) (*vulnerability.FilterToFindAllVulnerabilities, error) {
	repositoryID, err := uuid.Parse(chi.URLParam(r, "repositoryID"))
	if err != nil {
		return nil, enumsFilterVulnerabilities.ErrorWrongRepositoryID
	}
	page, _ := strconv.Atoi(r.URL.Query().Get("page"))
	size, _ := strconv.Atoi(r.URL.Query().Get("size"))
	entity := &vulnerability.FilterToFindAllVulnerabilities{
		RepositoryID: repositoryID,
		Page:         page,
		Size:         u.getSizeOrMin(size),
		VulnSeverity: severities.GetSeverityByString(r.URL.Query().Get("vulnSeverity")),
		VulnType:     enumsVulnerability.GetVulnTypeByString(r.URL.Query().Get("vulnType")),
		VulnHash:     r.URL.Query().Get("vulnHash"),
	}
	return entity, u.validateFilterToFindAllVulnerabilities(entity)
}

func (u *UseCaseVulnerabilityFilter) getSizeOrMin(size int) int {
	if size < 10 {
		return 10
	}
	return size
}

func (u *UseCaseVulnerabilityFilter) validateFilterToFindAllVulnerabilities(
	entity *vulnerability.FilterToFindAllVulnerabilities) error {
	return validation.ValidateStruct(entity,
		validation.Field(&entity.RepositoryID, validation.Required, validation.NotIn(uuid.Nil)),
		validation.Field(&entity.Page, validation.Min(0)),
		validation.Field(&entity.Size, validation.Min(10)),
		validation.Field(&entity.VulnSeverity, validation.In(severities.Unknown, severities.Critical,
			severities.High, severities.Medium, severities.Low, severities.Info)),
		validation.Field(&entity.VulnType, validation.In(enumsVulnerability.Unknown, enumsVulnerability.Vulnerability,
			enumsVulnerability.RiskAccepted, enumsVulnerability.FalsePositive, enumsVulnerability.Corrected)),
	)
}
