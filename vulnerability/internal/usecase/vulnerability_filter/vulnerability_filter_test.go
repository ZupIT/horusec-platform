package vulnerabilityfilter

import (
	"context"
	"net/http"
	"testing"

	"github.com/go-chi/chi"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"

	enumsFilterVulnerabilities "github.com/ZupIT/horusec-platform/vulnerability/internal/enums/usecase/filter_vulnerabilities"
)

func TestNewUseCaseVulnerabilityFilter(t *testing.T) {
	t.Run("Should parse query filters to entity without error", func(t *testing.T) {
		r, _ := http.NewRequest(http.MethodGet, "/test", nil)
		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("repositoryID", uuid.NewString())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))
		filter, err := NewUseCaseVulnerabilityFilter().ParseQueryInFilterToFindAllVulnerabilities(r)
		assert.NoError(t, err)
		assert.NotNil(t, filter)
	})
	t.Run("Should return error when not send valid repositoryID", func(t *testing.T) {
		r, _ := http.NewRequest(http.MethodGet, "/test", nil)
		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("repositoryID", "test")

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))
		filter, err := NewUseCaseVulnerabilityFilter().ParseQueryInFilterToFindAllVulnerabilities(r)
		assert.Equal(t, err, enumsFilterVulnerabilities.ErrorWrongRepositoryID)
		assert.Nil(t, filter)
	})
}
