package management

import (
	"context"
	"fmt"
	"net/http"
	"testing"

	"github.com/go-chi/chi"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	vulnerabilityEnums "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/utils/parser"

	managementEntities "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management"
)

func TestVulnDataFromIoReader(t *testing.T) {
	t.Run("should success get vulnerability data from request body", func(t *testing.T) {
		useCases := NewManagementUseCases()

		data := &managementEntities.Data{
			VulnerabilityID: uuid.New(),
			Severity:        severities.Critical,
			Type:            vulnerabilityEnums.FalsePositive,
		}

		readCloser, err := parser.ParseEntityToIOReadCloser(data)
		assert.NoError(t, err)

		response, err := useCases.VulnDataFromIOReadCloser(readCloser)
		assert.NoError(t, err)
		assert.NotNil(t, response)
		assert.Equal(t, data.VulnerabilityID, response.VulnerabilityID)
		assert.Equal(t, data.Severity, response.Severity)
		assert.Equal(t, data.Type, response.Type)
	})

	t.Run("should return error when failed to parse body to entity", func(t *testing.T) {
		useCases := NewManagementUseCases()

		readCloser, err := parser.ParseEntityToIOReadCloser("")
		assert.NoError(t, err)

		response, err := useCases.VulnDataFromIOReadCloser(readCloser)
		assert.Error(t, err)
		assert.Nil(t, response)
	})
}

func TestManagementFilterFromRequest(t *testing.T) {
	t.Run("should create a new filter from request", func(t *testing.T) {
		useCases := NewManagementUseCases()

		id := uuid.New()

		URL := fmt.Sprintf("/test?page=1&size=15&vulnSeverity=%s&vulnType=%s&vulnHash=%s",
			severities.Critical.ToString(), vulnerabilityEnums.Vulnerability.ToString(), "123456")

		r, _ := http.NewRequest(http.MethodGet, URL, nil)

		ctx := chi.NewRouteContext()
		ctx.URLParams.Add("workspaceID", id.String())
		ctx.URLParams.Add("repositoryID", id.String())

		r = r.WithContext(context.WithValue(r.Context(), chi.RouteCtxKey, ctx))

		filter, err := useCases.ManagementFilterFromRequest(r)
		assert.NoError(t, err)
		assert.NotNil(t, filter)
	})

	t.Run("should return error when failed to create filter", func(t *testing.T) {
		useCases := NewManagementUseCases()

		r, _ := http.NewRequest(http.MethodGet, "/test", nil)

		filter, err := useCases.ManagementFilterFromRequest(r)
		assert.Error(t, err)
		assert.Empty(t, filter)
	})
}

func TestFilterVulnerabilityByID(t *testing.T) {
	t.Run("should success create a new filter", func(t *testing.T) {
		useCases := NewManagementUseCases()

		id := uuid.New()

		filter := useCases.FilterVulnerabilityByID(id)

		assert.NotPanics(t, func() {
			assert.Equal(t, id, filter["vulnerability_id"])
		})
	})
}

func TestFilterAnalysisByID(t *testing.T) {
	t.Run("should success create a new filter", func(t *testing.T) {
		useCases := NewManagementUseCases()

		id := uuid.New()

		filter := useCases.FilterAnalysisByID(id)

		assert.NotPanics(t, func() {
			assert.Equal(t, id, filter["analysis_id"])
		})
	})
}
