// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package management

import (
	"io"
	"net/http"

	"github.com/google/uuid"

	"github.com/ZupIT/horusec-devkit/pkg/utils/parser"

	managementEntities "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management"
)

type IUseCases interface {
	UpdateDataFromIOReadCloser(body io.ReadCloser) (*managementEntities.UpdateData, error)
	ManagementFilterFromRequest(request *http.Request, validateVulnFile bool) (*managementEntities.Filter, error)
	FilterVulnerabilityByID(vulnerabilityID uuid.UUID) map[string]interface{}
	FilterAnalysisByID(analysisID uuid.UUID) map[string]interface{}
}

type UseCases struct{}

func NewManagementUseCases() IUseCases {
	return &UseCases{}
}

func (u *UseCases) UpdateDataFromIOReadCloser(body io.ReadCloser) (*managementEntities.UpdateData, error) {
	data := &managementEntities.UpdateData{}

	if err := parser.ParseBodyToEntity(body, &data); err != nil {
		return nil, err
	}

	return data, data.Validate()
}

func (u *UseCases) ManagementFilterFromRequest(request *http.Request,
	validateVulnFile bool) (*managementEntities.Filter, error) {
	filter := &managementEntities.Filter{}
	err := filter.SetFilterDataFromRequest(request, validateVulnFile)
	if err != nil {
		return nil, err
	}
	return filter, filter.Validate()
}

func (u *UseCases) FilterVulnerabilityByID(vulnerabilityID uuid.UUID) map[string]interface{} {
	return map[string]interface{}{"vulnerability_id": vulnerabilityID}
}

func (u *UseCases) FilterAnalysisByID(analysisID uuid.UUID) map[string]interface{} {
	return map[string]interface{}{"analysis_id": analysisID}
}
