package management

import (
	"io"
	"net/http"

	"github.com/google/uuid"

	"github.com/ZupIT/horusec-devkit/pkg/utils/parser"

	managementEntities "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management"
)

type IUseCases interface {
	VulnDataFromIOReadCloser(body io.ReadCloser) (updateVuln *managementEntities.Data, err error)
	ManagementFilterFromRequest(request *http.Request) (*managementEntities.Filter, error)
	FilterVulnerabilityByID(vulnerabilityID uuid.UUID) map[string]interface{}
	FilterAnalysisByID(analysisID uuid.UUID) map[string]interface{}
}

type UseCases struct{}

func NewManagementUseCases() IUseCases {
	return &UseCases{}
}

func (u *UseCases) VulnDataFromIOReadCloser(body io.ReadCloser) (data *managementEntities.Data, err error) {
	if err := parser.ParseBodyToEntity(body, &data); err != nil {
		return nil, err
	}

	return data, data.Validate()
}

func (u *UseCases) ManagementFilterFromRequest(request *http.Request) (*managementEntities.Filter, error) {
	filter := &managementEntities.Filter{}

	return filter, filter.SetFilterDataFromRequest(request)
}

func (u *UseCases) FilterVulnerabilityByID(vulnerabilityID uuid.UUID) map[string]interface{} {
	return map[string]interface{}{"vulnerability_id": vulnerabilityID}
}

func (u *UseCases) FilterAnalysisByID(analysisID uuid.UUID) map[string]interface{} {
	return map[string]interface{}{"analysis_id": analysisID}
}
