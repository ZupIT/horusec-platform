package management

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	"github.com/google/uuid"
	"github.com/pkg/errors"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	"github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"

	vulnerabilityEnums "github.com/ZupIT/horusec-platform/vulnerability/internal/enums/management"
)

type Filter struct {
	WorkspaceID  uuid.UUID `json:"workspaceID"`
	RepositoryID uuid.UUID `json:"repositoryID"`
	Page         int       `json:"page"`
	Size         int       `json:"size"`
	VulnSeverity string    `json:"vulnSeverity"`
	VulnType     string    `json:"vulnType"`
	VulnHash     string    `json:"vulnHash"`
}

func (f *Filter) SetFilterDataFromRequest(r *http.Request) error {
	page, err := strconv.Atoi(r.URL.Query().Get(vulnerabilityEnums.Page))
	if err != nil {
		return errors.Wrap(err, vulnerabilityEnums.MessageInvalidPaginationPage)
	}

	size, err := strconv.Atoi(r.URL.Query().Get(vulnerabilityEnums.Size))
	if err != nil {
		return errors.Wrap(err, vulnerabilityEnums.MessageInvalidPaginationSize)
	}

	f.setPagination(page, size)
	f.setVulnerabilityFilters(r)
	return f.setWorkspaceAndRepositoryIDFromRequest(r)
}

func (f *Filter) setPagination(page, size int) {
	if size < vulnerabilityEnums.DefaultPaginationSize {
		f.Size = vulnerabilityEnums.DefaultPaginationSize
	} else {
		f.Size = size
	}

	f.Page = page
	return
}

func (f *Filter) setWorkspaceAndRepositoryIDFromRequest(r *http.Request) error {
	workspaceID, err := uuid.Parse(chi.URLParam(r, vulnerabilityEnums.WorkspaceID))
	if err != nil {
		return vulnerabilityEnums.ErrorInvalidWorkspaceID
	}

	f.WorkspaceID = workspaceID
	if chi.URLParam(r, vulnerabilityEnums.RepositoryID) != "" {
		repositoryID, err := uuid.Parse(chi.URLParam(r, vulnerabilityEnums.RepositoryID))
		if err != nil {
			return vulnerabilityEnums.ErrorInvalidRepositoryID
		}

		f.RepositoryID = repositoryID
	}

	return nil
}

func (f *Filter) setVulnerabilityFilters(r *http.Request) {
	f.VulnSeverity = r.URL.Query().Get(vulnerabilityEnums.VulnSeverityQuery)
	f.VulnType = r.URL.Query().Get(vulnerabilityEnums.VulnTypeQuery)
	f.VulnHash = r.URL.Query().Get(vulnerabilityEnums.VulnHashQuery)
}

func (f *Filter) Validate() error {
	return validation.ValidateStruct(f,
		validation.Field(&f.WorkspaceID, validation.Required, validation.NotIn(uuid.Nil)),
		validation.Field(&f.RepositoryID, validation.Required),
		validation.Field(&f.Page, validation.Min(0)),
		validation.Field(&f.Size, validation.Min(vulnerabilityEnums.DefaultPaginationSize)),
		validation.Field(&f.VulnSeverity, validation.In(severities.Unknown.ToString(), severities.Critical.ToString(),
			severities.High.ToString(), severities.Medium.ToString(), severities.Low.ToString(),
			severities.Info.ToString(), vulnerabilityEnums.AllFilters)),
		validation.Field(&f.VulnType, validation.In(vulnerabilityEnums.AllFilters,
			vulnerability.Vulnerability.ToString(), vulnerability.RiskAccepted.ToString(),
			vulnerability.FalsePositive.ToString(), vulnerability.Corrected.ToString())),
	)
}

func (f *Filter) GetWhereFilterQuery() (string, []interface{}) {
	query, params := f.getWorkspaceAndRepositoryIDQuery()
	query, params = f.getVulnerabilityHashQuery(query, params)
	query, params = f.getVulnerabilitySeverityQuery(query, params)
	query, params = f.getVulnerabilityTypeQuery(query, params)

	return query, params
}

func (f *Filter) getWorkspaceAndRepositoryIDQuery() (string, []interface{}) {
	query := "analysis.workspace_id = ?"
	params := []interface{}{f.WorkspaceID}

	if f.RepositoryID != uuid.Nil {
		query += " AND analysis.repository_id = ? "
		params = append(params, f.RepositoryID)
	}

	return query, params
}

func (f *Filter) getVulnerabilityHashQuery(query string, params []interface{}) (string, []interface{}) {
	if f.VulnHash != "" {
		query += " AND vulnerabilities.vuln_hash ILIKE ? "
		params = append(params, "%"+f.VulnHash+"%")
	}

	return query, params
}

func (f *Filter) getVulnerabilitySeverityQuery(query string, params []interface{}) (string, []interface{}) {
	if f.VulnSeverity != vulnerabilityEnums.AllFilters && f.VulnSeverity != "" {
		query += " AND vulnerabilities.severity = ? "
		params = append(params, f.VulnSeverity)
	}

	return query, params
}

func (f *Filter) getVulnerabilityTypeQuery(query string, params []interface{}) (string, []interface{}) {
	if f.VulnType != vulnerabilityEnums.AllFilters && f.VulnType != "" {
		query += " AND vulnerabilities.type = ? "
		params = append(params, f.VulnType)
	}

	return query, params
}
