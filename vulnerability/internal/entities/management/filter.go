package management

import (
	"database/sql"
	"fmt"
	"net/http"
	"strconv"

	"github.com/go-chi/chi"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	"github.com/google/uuid"
	"github.com/pkg/errors"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	vulnerabilityEnums "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/utils/pagination"

	managementEnums "github.com/ZupIT/horusec-platform/vulnerability/internal/enums/management"
)

type Filter struct {
	WorkspaceID  uuid.UUID `json:"workspaceID"`
	RepositoryID uuid.UUID `json:"repositoryID"`
	Page         int       `json:"page"`
	Size         int       `json:"size"`
	VulnSeverity string    `json:"vulnSeverity"`
	VulnType     string    `json:"vulnType"`
	VulnHash     string    `json:"vulnHash"`
}

func (f *Filter) SetFilterDataFromRequest(r *http.Request) error {
	page, err := strconv.Atoi(r.URL.Query().Get(managementEnums.Page))
	if err != nil {
		return errors.Wrap(err, managementEnums.MessageInvalidPaginationPage)
	}

	size, err := strconv.Atoi(r.URL.Query().Get(managementEnums.Size))
	if err != nil {
		return errors.Wrap(err, managementEnums.MessageInvalidPaginationSize)
	}

	f.setPagination(page, size)
	f.setVulnerabilityFilters(r)
	return f.setWorkspaceAndRepositoryIDFromRequest(r)
}

func (f *Filter) setPagination(page, size int) {
	if size < managementEnums.DefaultPaginationSize {
		f.Size = managementEnums.DefaultPaginationSize
	} else {
		f.Size = size
	}

	f.Page = page
}

func (f *Filter) setWorkspaceAndRepositoryIDFromRequest(r *http.Request) error {
	workspaceID, err := uuid.Parse(chi.URLParam(r, managementEnums.WorkspaceID))
	if err != nil {
		return managementEnums.ErrorInvalidWorkspaceID
	}

	f.WorkspaceID = workspaceID
	if chi.URLParam(r, managementEnums.RepositoryID) != "" {
		return f.setRepositoryIDFromRequest(r)
	}

	return nil
}

func (f *Filter) setRepositoryIDFromRequest(r *http.Request) error {
	repositoryID, err := uuid.Parse(chi.URLParam(r, managementEnums.RepositoryID))
	if err != nil {
		return managementEnums.ErrorInvalidRepositoryID
	}

	f.RepositoryID = repositoryID
	return nil
}

func (f *Filter) setVulnerabilityFilters(r *http.Request) {
	f.VulnSeverity = r.URL.Query().Get(managementEnums.VulnSeverityQuery)
	f.VulnType = r.URL.Query().Get(managementEnums.VulnTypeQuery)
	f.VulnHash = r.URL.Query().Get(managementEnums.VulnHashQuery)
}

func (f *Filter) Validate() error {
	return validation.ValidateStruct(f,
		validation.Field(&f.WorkspaceID, validation.Required, validation.NotIn(uuid.Nil)),
		validation.Field(&f.RepositoryID, validation.Required),
		validation.Field(&f.Page, validation.Min(0)),
		validation.Field(&f.Size, validation.Min(managementEnums.DefaultPaginationSize)),
		validation.Field(&f.VulnSeverity, validation.In(severities.Unknown.ToString(), severities.Critical.ToString(),
			severities.High.ToString(), severities.Medium.ToString(), severities.Low.ToString(),
			severities.Info.ToString(), managementEnums.AllFilters)),
		validation.Field(&f.VulnType, validation.In(managementEnums.AllFilters,
			vulnerabilityEnums.Vulnerability.ToString(), vulnerabilityEnums.RiskAccepted.ToString(),
			vulnerabilityEnums.FalsePositive.ToString(), vulnerabilityEnums.Corrected.ToString())),
	)
}

func (f *Filter) GetWhereFilterQuery() (string, []interface{}) {
	query := f.GetWorkspaceAndRepositoryIDQuery()
	query = f.getVulnerabilityHashQuery(query)
	query = f.getVulnerabilitySeverityQuery(query)
	query = f.getVulnerabilityTypeQuery(query)
	query = f.getLatestAnalysisIDByFilter(query)

	return query, f.getParams()
}

func (f *Filter) GetWorkspaceAndRepositoryIDQuery() string {
	query := "analysis.workspace_id = @workspaceID "

	if f.RepositoryID != uuid.Nil {
		query += "AND analysis.repository_id = @repositoryID "
	}

	return query
}

func (f *Filter) getVulnerabilityHashQuery(query string) string {
	if f.VulnHash != "" {
		query += " AND vulnerabilities.vuln_hash ILIKE @vulnHash "
	}

	return query
}

func (f *Filter) getVulnerabilitySeverityQuery(query string) string {
	if f.VulnSeverity != managementEnums.AllFilters && f.VulnSeverity != "" {
		query += " AND vulnerabilities.severity = @vulnSeverity "
	}

	return query
}

func (f *Filter) getVulnerabilityTypeQuery(query string) string {
	if f.VulnType != managementEnums.AllFilters && f.VulnType != "" {
		query += " AND vulnerabilities.type = @vulnType "
	}

	return query
}

func (f *Filter) getParams() []interface{} {
	return []interface{}{
		sql.Named("workspaceID", f.WorkspaceID),
		sql.Named("repositoryID", f.RepositoryID),
		sql.Named("vulnHash", "%"+f.VulnHash+"%"),
		sql.Named("vulnSeverity", f.VulnSeverity),
		sql.Named("vulnType", f.VulnType),
		sql.Named("size", f.Size),
		sql.Named("skip", pagination.GetSkip(int64(f.Page), int64(f.Size))),
	}
}

func (f *Filter) getLatestAnalysisIDByFilter(query string) string {
	if f.RepositoryID != uuid.Nil {
		query += fmt.Sprintf(" AND analysis.analysis_id = (SELECT analysis_id FROM analysis WHERE %[1]s "+
			"ORDER BY created_at DESC LIMIT 1)", f.GetWorkspaceAndRepositoryIDQuery())
	} else {
		query += fmt.Sprintf(" AND analysis.analysis_id IN (SELECT DISTINCT ON(analysis.repository_id) "+
			"analysis.analysis_id FROM analysis WHERE %[1]s ORDER BY analysis.repository_id, analysis.created_at DESC)",
			f.GetWorkspaceAndRepositoryIDQuery())
	}

	return query
}
