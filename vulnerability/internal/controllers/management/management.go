package management

import (
	"time"

	"github.com/google/uuid"

	"github.com/ZupIT/horusec-devkit/pkg/enums/exchange"
	brokerLib "github.com/ZupIT/horusec-devkit/pkg/services/broker"

	managementEntities "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management"
	managementRepository "github.com/ZupIT/horusec-platform/vulnerability/internal/repositories/management"
)

type IController interface {
	GetAllVulnerabilities(filter *managementEntities.Filter) (*managementEntities.Response, error)
	UpdateVulnerabilities(entity *managementEntities.Data) error
}

type Controller struct {
	repository managementRepository.IRepository
	broker     brokerLib.IBroker
}

func NewManagementController(repository managementRepository.IRepository, broker brokerLib.IBroker) IController {
	return &Controller{
		repository: repository,
		broker:     broker,
	}
}

func (c *Controller) GetAllVulnerabilities(filter *managementEntities.Filter) (*managementEntities.Response, error) {
	return c.repository.GetAllVulnerabilities(filter)
}

func (c *Controller) UpdateVulnerabilities(data *managementEntities.Data) error {
	vuln, err := c.repository.GetVulnerability(data.VulnerabilityID)
	if err != nil {
		return err
	}

	vuln.SetType(data.Type)
	vuln.SetSeverity(data.Severity)
	if err := c.repository.UpdateVulnerability(vuln); err != nil {
		return err
	}

	return c.publishAnalysisChanges(data.VulnerabilityID)
}

func (c *Controller) publishAnalysisChanges(analysisID uuid.UUID) error {
	analysis, err := c.repository.GetAnalysis(analysisID)
	if err != nil {
		return err
	}

	analysis.CreatedAt = time.Now() // send an updated analysis to analytic, can be improved.
	return c.broker.Publish("", exchange.NewAnalysis, exchange.Fanout, analysis.ToBytes())
}
