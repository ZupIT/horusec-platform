// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package management

import (
	"errors"
	"testing"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"

	analysisEntities "github.com/ZupIT/horusec-devkit/pkg/entities/analysis"
	vulnerabilityEntities "github.com/ZupIT/horusec-devkit/pkg/entities/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	vulnerabilityEnums "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/services/broker"
	"github.com/ZupIT/horusec-devkit/pkg/services/database"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/response"

	managementEntities "github.com/ZupIT/horusec-platform/vulnerability/internal/entities/management"
	managementRepository "github.com/ZupIT/horusec-platform/vulnerability/internal/repositories/management"
	managementUseCases "github.com/ZupIT/horusec-platform/vulnerability/internal/usecase/management"
)

func TestNewManagementController(t *testing.T) {
	t.Run("should success create a new controller", func(t *testing.T) {
		assert.NotNil(t, NewManagementController(nil, nil, &database.Connection{}, nil))
	})
}

func TestGetAllVulnerabilitiesOfTheFile(t *testing.T) {
	t.Run("should success get all vulnerabilities of the file", func(t *testing.T) {
		brokerMock := &broker.Mock{}
		databaseMock := &database.Mock{}
		databaseConnection := &database.Connection{Read: databaseMock, Write: databaseMock}

		repositoryMock := &managementRepository.Mock{}
		repositoryMock.On("ListVulnerabilitiesByFile").Return(&managementEntities.ResponseVulnerabilitiesByFile{}, nil)

		controller := NewManagementController(repositoryMock, brokerMock,
			databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := controller.ListVulnerabilitiesByFile(&managementEntities.Filter{})
		assert.NoError(t, err)
		assert.NotNil(t, result)
	})
}

func TestGetAllFilesVulnerable(t *testing.T) {
	t.Run("should success get all files vulnerable", func(t *testing.T) {
		brokerMock := &broker.Mock{}
		databaseMock := &database.Mock{}
		databaseConnection := &database.Connection{Read: databaseMock, Write: databaseMock}

		repositoryMock := &managementRepository.Mock{}
		repositoryMock.On("ListVulnerableFiles").Return(&managementEntities.ResponseFilesVulnerable{
			TotalItems: 4,
			Data: []managementEntities.ResponseDataFilesVulnerable{
				{
					File: "ruby/example1/Gemfile.lock",
				},
				{
					File: "go/example1/api/util/util.go",
				},
				{
					File: "javascript/example1/package-lock.json",
				},
				{
					File: "php/example1/wp-config.php",
				},
			},
		}, nil)

		controller := NewManagementController(repositoryMock, brokerMock,
			databaseConnection, managementUseCases.NewManagementUseCases())

		result, err := controller.ListVulnerableFiles(&managementEntities.Filter{})
		assert.NoError(t, err)
		assert.NotNil(t, result)
		assert.Equal(t, 4, result.TotalItems)
		assert.Len(t, result.Data, 4)
		assert.Equal(t, []string{"Gemfile.lock"}, result.Data[0].Languages)
		assert.Equal(t, []string{"Go"}, result.Data[1].Languages)
		assert.Equal(t, []string{"JSON"}, result.Data[2].Languages)
		assert.Equal(t, []string{"Hack", "PHP"}, result.Data[3].Languages)
	})
	t.Run("should error get all files vulnerable", func(t *testing.T) {
		brokerMock := &broker.Mock{}
		databaseMock := &database.Mock{}
		databaseConnection := &database.Connection{Read: databaseMock, Write: databaseMock}

		repositoryMock := &managementRepository.Mock{}
		repositoryMock.On("ListVulnerableFiles").Return(&managementEntities.ResponseFilesVulnerable{}, errors.New("unexpected error"))

		controller := NewManagementController(repositoryMock, brokerMock,
			databaseConnection, managementUseCases.NewManagementUseCases())

		_, err := controller.ListVulnerableFiles(&managementEntities.Filter{})
		assert.Error(t, err)
	})
}

func TestUpdateVulnerability(t *testing.T) {
	updateData := &managementEntities.UpdateData{
		Vulnerabilities: []*managementEntities.VulnerabilityData{
			{
				VulnerabilityID: uuid.New(),
				Severity:        severities.Critical,
				Type:            vulnerabilityEnums.Vulnerability,
			},
		},
		AnalysisID: uuid.New(),
	}

	t.Run("should success update vulnerabilities", func(t *testing.T) {
		databaseMock := &database.Mock{}
		databaseMock.On("StartTransaction").Return(databaseMock)
		databaseMock.On("Update").Return(&response.Response{})
		databaseMock.On("CommitTransaction").Return(&response.Response{})

		databaseConnection := &database.Connection{Read: databaseMock, Write: databaseMock}

		brokerMock := &broker.Mock{}
		brokerMock.On("Publish").Return(nil)

		repositoryMock := &managementRepository.Mock{}
		repositoryMock.On("GetVulnerability").Return(&vulnerabilityEntities.Vulnerability{}, nil)
		repositoryMock.On("GetAnalysis").Return(&analysisEntities.Analysis{}, nil)

		controller := NewManagementController(repositoryMock, brokerMock,
			databaseConnection, managementUseCases.NewManagementUseCases())

		assert.NoError(t, controller.UpdateVulnerabilities(updateData))
	})

	t.Run("should return error when getting analysis", func(t *testing.T) {
		brokerMock := &broker.Mock{}

		databaseMock := &database.Mock{}
		databaseMock.On("StartTransaction").Return(databaseMock)
		databaseMock.On("Update").Return(&response.Response{})
		databaseMock.On("CommitTransaction").Return(&response.Response{})

		databaseConnection := &database.Connection{Read: databaseMock, Write: databaseMock}

		repositoryMock := &managementRepository.Mock{}
		repositoryMock.On("GetVulnerability").Return(&vulnerabilityEntities.Vulnerability{}, nil)
		repositoryMock.On("GetAnalysis").Return(&analysisEntities.Analysis{}, errors.New("test"))

		controller := NewManagementController(repositoryMock, brokerMock,
			databaseConnection, managementUseCases.NewManagementUseCases())

		assert.Error(t, controller.UpdateVulnerabilities(updateData))
	})

	t.Run("should return error when updating vulnerabilities", func(t *testing.T) {
		brokerMock := &broker.Mock{}

		databaseMock := &database.Mock{}
		databaseMock.On("StartTransaction").Return(databaseMock)
		databaseMock.On("Update").Return(
			response.NewResponse(0, errors.New("test"), nil))
		databaseMock.On("RollbackTransaction").Return(&response.Response{})

		databaseConnection := &database.Connection{Read: databaseMock, Write: databaseMock}

		repositoryMock := &managementRepository.Mock{}
		repositoryMock.On("GetVulnerability").Return(&vulnerabilityEntities.Vulnerability{}, nil)

		controller := NewManagementController(repositoryMock, brokerMock,
			databaseConnection, managementUseCases.NewManagementUseCases())

		assert.Error(t, controller.UpdateVulnerabilities(updateData))
	})

	t.Run("should return error when getting vulnerability", func(t *testing.T) {
		brokerMock := &broker.Mock{}

		databaseMock := &database.Mock{}
		databaseMock.On("StartTransaction").Return(databaseMock)
		databaseMock.On("RollbackTransaction").Return(&response.Response{})

		databaseConnection := &database.Connection{Read: databaseMock, Write: databaseMock}

		repositoryMock := &managementRepository.Mock{}
		repositoryMock.On("GetVulnerability").Return(
			&vulnerabilityEntities.Vulnerability{}, errors.New("test"))

		controller := NewManagementController(repositoryMock, brokerMock,
			databaseConnection, managementUseCases.NewManagementUseCases())

		assert.Error(t, controller.UpdateVulnerabilities(updateData))
	})

	t.Run("should return error when failed to commit transaction", func(t *testing.T) {
		brokerMock := &broker.Mock{}

		databaseMock := &database.Mock{}
		databaseMock.On("StartTransaction").Return(databaseMock)
		databaseMock.On("Update").Return(&response.Response{})
		databaseMock.On("CommitTransaction").Return(
			response.NewResponse(0, errors.New("test"), nil))

		databaseConnection := &database.Connection{Read: databaseMock, Write: databaseMock}

		repositoryMock := &managementRepository.Mock{}
		repositoryMock.On("GetVulnerability").Return(&vulnerabilityEntities.Vulnerability{}, nil)
		repositoryMock.On("GetAnalysis").Return(&analysisEntities.Analysis{}, nil)

		controller := NewManagementController(repositoryMock, brokerMock,
			databaseConnection, managementUseCases.NewManagementUseCases())

		assert.Error(t, controller.UpdateVulnerabilities(updateData))
	})
}
