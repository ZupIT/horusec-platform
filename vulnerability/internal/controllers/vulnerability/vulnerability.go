package vulnerability

import (
	"encoding/json"
	entityVulnerability "github.com/ZupIT/horusec-devkit/pkg/entities/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	enumsVulnerability "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/services/broker"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/enums"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/entities/vulnerability"
	repositoriesVulnerability "github.com/ZupIT/horusec-platform/vulnerability/internal/repositories/vulnerability"
	"github.com/google/uuid"
)

type IController interface {
	FindAllVulnerabilityByFilter(
		filter *vulnerability.FilterToFindAllVulnerabilities) (*vulnerability.FindVulnerabilities, error)
	UpdateVulnerability(entity *vulnerability.UpdateVulnerability) error
}

type Controller struct {
	repoVulnerability repositoriesVulnerability.IRepositoryVulnerability
	broker broker.IBroker
}

func NewVulnerabilitiesController(repoVulnerability repositoriesVulnerability.IRepositoryVulnerability, iBroker broker.IBroker) IController {
	return &Controller{
		repoVulnerability: repoVulnerability,
		broker: iBroker,
	}
}

func (c *Controller) FindAllVulnerabilityByFilter(
	filter *vulnerability.FilterToFindAllVulnerabilities) (*vulnerability.FindVulnerabilities, error) {
	return c.repoVulnerability.FindAllVulnerabilitiesByFilter(filter)
}

func (c *Controller) UpdateVulnerability(entityToUpdate *vulnerability.UpdateVulnerability) error {
	vulnFound, err := c.repoVulnerability.GetVulnerabilityBYID(entityToUpdate.VulnerabilityID)
	if err != nil {
		return err
	}
	if vulnFound == nil {
		return enums.ErrorNotFoundRecords
	}
	if err := c.repoVulnerability.UpdateVulnerability(entityToUpdate); err != nil {
		return err
	}
	return c.publishToAnalytic(vulnFound, entityToUpdate)
}

func (c *Controller) publishToAnalytic(vulnFound *entityVulnerability.Vulnerability, entityToUpdate *vulnerability.UpdateVulnerability) error {
	type VulnToUpdate struct {
		Severity        severities.Severity     `json:"severity"`
		Type            enumsVulnerability.Type `json:"type"`
	}
	type UpdateVulnerability struct {
		VulnerabilityID uuid.UUID `json:"vulnerabilityID"`
		Old VulnToUpdate `json:"old"`
		New VulnToUpdate `json:"new"`
	}

	bodyVulnerability := &UpdateVulnerability{
		VulnerabilityID: uuid.UUID{},
		Old: VulnToUpdate{
			Severity:        vulnFound.Severity,
			Type:            vulnFound.Type,
		},
		New: VulnToUpdate{
			Severity:        entityToUpdate.Severity,
			Type:            entityToUpdate.Type,
		},
	}
	body, _ := json.Marshal(bodyVulnerability)
	return c.broker.Publish("update-vulnerability", "", "", body)
}
