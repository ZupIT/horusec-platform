package vulnerability

import (
	entityVulnerability "github.com/ZupIT/horusec-devkit/pkg/entities/vulnerability"
	"github.com/ZupIT/horusec-devkit/pkg/enums/queues"
	"github.com/ZupIT/horusec-devkit/pkg/services/broker"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/enums"

	updateVulnerabilityAnalytic "github.com/ZupIT/horusec-devkit/pkg/entities/update_vulnerability_analytic"

	"github.com/ZupIT/horusec-platform/vulnerability/internal/entities/vulnerability"
	repositoriesVulnerability "github.com/ZupIT/horusec-platform/vulnerability/internal/repositories/vulnerability"
)

type IController interface {
	FindAllVulnerabilityByFilter(
		filter *vulnerability.FilterToFindAllVulnerabilities) (*vulnerability.FindVulnerabilities, error)
	UpdateVulnerability(entity *vulnerability.UpdateVulnerability) error
}

type Controller struct {
	repoVulnerability repositoriesVulnerability.IRepositoryVulnerability
	broker            broker.IBroker
}

func NewVulnerabilitiesController(repoVulnerability repositoriesVulnerability.IRepositoryVulnerability,
	iBroker broker.IBroker) IController {
	return &Controller{
		repoVulnerability: repoVulnerability,
		broker:            iBroker,
	}
}

func (c *Controller) FindAllVulnerabilityByFilter(
	filter *vulnerability.FilterToFindAllVulnerabilities) (*vulnerability.FindVulnerabilities, error) {
	return c.repoVulnerability.FindAllVulnerabilitiesByFilter(filter)
}

func (c *Controller) UpdateVulnerability(entityToUpdate *vulnerability.UpdateVulnerability) error {
	vulnFound, err := c.repoVulnerability.GetVulnerabilityBYID(entityToUpdate.VulnerabilityID)
	if err != nil {
		return err
	}
	if vulnFound == nil {
		return enums.ErrorNotFoundRecords
	}
	if err := c.repoVulnerability.UpdateVulnerability(entityToUpdate); err != nil {
		return err
	}
	return c.publishToAnalytic(vulnFound, entityToUpdate)
}

func (c *Controller) publishToAnalytic(oldVuln *entityVulnerability.Vulnerability,
	entityToUpdate *vulnerability.UpdateVulnerability) error {
	newVuln := &entityVulnerability.Vulnerability{
		VulnerabilityID: entityToUpdate.VulnerabilityID, Severity: entityToUpdate.Severity,
		Type: entityToUpdate.Type, Line: oldVuln.Line, Column: oldVuln.Column, Confidence: oldVuln.Confidence,
		File: oldVuln.File, Code: oldVuln.Code, Details: oldVuln.Details, SecurityTool: oldVuln.SecurityTool,
		Language: oldVuln.Language, VulnHash: oldVuln.VulnHash, CommitAuthor: oldVuln.CommitAuthor,
		CommitEmail: oldVuln.CommitEmail, CommitHash: oldVuln.CommitHash, CommitMessage: oldVuln.CommitMessage,
		CommitDate: oldVuln.CommitDate,
	}
	body := updateVulnerabilityAnalytic.NewVulnerabilityToUpdate(newVuln, oldVuln).ToBytes()
	return c.broker.Publish(queues.HorusecUpdateVulnerabilityOnAnalytic.ToString(), "", "", body)
}
