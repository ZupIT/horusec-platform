//+build wireinject

package providers

import (
	"github.com/ZupIT/horusec-devkit/pkg/services/broker"
	brokerConfig "github.com/ZupIT/horusec-devkit/pkg/services/broker/config"
	routerHttp "github.com/ZupIT/horusec-devkit/pkg/services/http/router"
	"github.com/ZupIT/horusec-devkit/pkg/services/middlewares"
	"github.com/google/wire"

	vulnerabilityController "github.com/ZupIT/horusec-platform/vulnerability/internal/controllers/vulnerability"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/handlers/health"
	vulnerabilityHandler "github.com/ZupIT/horusec-platform/vulnerability/internal/handlers/vulnerability"
	vulnerabilityRepository "github.com/ZupIT/horusec-platform/vulnerability/internal/repositories/vulnerability"

	"github.com/ZupIT/horusec-platform/vulnerability/internal/router"

	"github.com/ZupIT/horusec-devkit/pkg/services/grpc/auth/proto"

	"github.com/ZupIT/horusec-devkit/pkg/services/database"
	databaseConfig "github.com/ZupIT/horusec-devkit/pkg/services/database/config"
	"github.com/ZupIT/horusec-devkit/pkg/services/grpc/auth"

	"github.com/ZupIT/horusec-platform/vulnerability/config/cors"
)

var providers = wire.NewSet(
	brokerConfig.NewBrokerConfig,
	broker.NewBroker,
	databaseConfig.NewDatabaseConfig,
	database.NewDatabaseReadAndWrite,
	auth.NewAuthGRPCConnection,
	proto.NewAuthServiceClient,
	cors.NewCorsConfig,
	routerHttp.NewHTTPRouter,
	middlewares.NewAuthzMiddleware,
	vulnerabilityRepository.NewRepositoryVulnerability,
	vulnerabilityController.NewVulnerabilitiesController,
	health.NewHealthHandler,
	vulnerabilityHandler.NewVulnerabilitiesHandler,
	router.NewHTTPRouter,
)

func Initialize(defaultPort string) (router.IRouter, error) {
	wire.Build(providers)
	return &router.Router{}, nil
}
