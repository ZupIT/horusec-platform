// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package providers

import (
	"github.com/ZupIT/horusec-devkit/pkg/services/broker"
	config2 "github.com/ZupIT/horusec-devkit/pkg/services/broker/config"
	"github.com/ZupIT/horusec-devkit/pkg/services/database"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/config"
	"github.com/ZupIT/horusec-devkit/pkg/services/grpc/auth"
	"github.com/ZupIT/horusec-devkit/pkg/services/grpc/auth/proto"
	router2 "github.com/ZupIT/horusec-devkit/pkg/services/http/router"
	"github.com/ZupIT/horusec-devkit/pkg/services/middlewares"
	"github.com/google/wire"

	"github.com/ZupIT/horusec-platform/vulnerability/config/cors"
	vulnerability2 "github.com/ZupIT/horusec-platform/vulnerability/internal/controllers/management"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/handlers/health"
	vulnerability3 "github.com/ZupIT/horusec-platform/vulnerability/internal/handlers/management"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/repositories/management"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/router"
)

// Injectors from wire.go:

func Initialize(defaultPort string) (router.IRouter, error) {
	options := cors.NewCorsConfig()
	iRouter := router2.NewHTTPRouter(options, defaultPort)
	clientConnInterface := auth.NewAuthGRPCConnection()
	iAuthzMiddleware := middlewares.NewAuthzMiddleware(clientConnInterface)
	iConfig := config.NewDatabaseConfig()
	connection, err := database.NewDatabaseReadAndWrite(iConfig)
	if err != nil {
		return nil, err
	}
	handler := health.NewHealthHandler(connection, clientConnInterface)
	iRepositoryVulnerability := management.NewManagementRepository(connection)
	configIConfig := config2.NewBrokerConfig()
	iBroker, err := broker.NewBroker(configIConfig)
	if err != nil {
		return nil, err
	}
	iController := vulnerability2.NewManagementController(iRepositoryVulnerability, iBroker)
	vulnerabilityHandler := vulnerability3.NewManagementHandler(iController)
	routerIRouter := router.NewHTTPRouter(iRouter, iAuthzMiddleware, handler, vulnerabilityHandler)
	return routerIRouter, nil
}

// wire.go:

var providers = wire.NewSet(config2.NewBrokerConfig, broker.NewBroker, config.NewDatabaseConfig, database.NewDatabaseReadAndWrite, auth.NewAuthGRPCConnection, proto.NewAuthServiceClient, cors.NewCorsConfig, router2.NewHTTPRouter, middlewares.NewAuthzMiddleware, management.NewManagementRepository, vulnerability2.NewManagementController, health.NewHealthHandler, vulnerability3.NewManagementHandler, router.NewHTTPRouter)
