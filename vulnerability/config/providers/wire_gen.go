// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package providers

import (
	"github.com/ZupIT/horusec-platform/vulnerability/config/cors"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/handlers/health"
	"github.com/ZupIT/horusec-platform/vulnerability/internal/router"
	"github.com/google/wire"

	"github.com/ZupIT/horusec-devkit/pkg/services/database"
	"github.com/ZupIT/horusec-devkit/pkg/services/database/config"
	"github.com/ZupIT/horusec-devkit/pkg/services/grpc/auth"
	"github.com/ZupIT/horusec-devkit/pkg/services/grpc/auth/proto"
	"github.com/ZupIT/horusec-devkit/pkg/services/http"
)

// Injectors from wire.go:

func Initialize(defaultPort string) (router.IRouter, error) {
	options := cors.NewCorsConfig()
	iRouter := http.NewHTTPRouter(options, defaultPort)
	iConfig := config.NewDatabaseConfig()
	connection, err := database.NewDatabaseReadAndWrite(iConfig)
	if err != nil {
		return nil, err
	}
	clientConnInterface := auth.NewAuthGRPCConnection()
	handler := health.NewHealthHandler(connection, clientConnInterface)
	routerIRouter := router.NewHTTPRouter(iRouter, handler)
	return routerIRouter, nil
}

// wire.go:

var providers = wire.NewSet(config.NewDatabaseConfig, database.NewDatabaseReadAndWrite, auth.NewAuthGRPCConnection, proto.NewAuthServiceClient, cors.NewCorsConfig, http.NewHTTPRouter, health.NewHealthHandler, router.NewHTTPRouter)
